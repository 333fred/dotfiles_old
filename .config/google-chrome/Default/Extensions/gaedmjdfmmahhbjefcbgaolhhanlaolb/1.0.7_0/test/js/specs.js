require(["controllers/account_controller","ui/widgets/dialog","test/mock/mock_dialog"],function(AccountController,Dialog,MockDialog){return describe("AccountController",function(){var controller;return controller=null,beforeEach(function(){return MockDialog.mock(),controller=new AccountController,spyOn(controller,"saveEmail"),spyOn(controller,"savePhone"),spyOn(controller,"cancelEdit")}),afterEach(function(){return MockDialog.unmock()}),describe("Change Email",function(){var email;return email=null,beforeEach(function(){return email="foo@bar.baz",controller.getCurrentEmail=function(){return email}}),it("should do nothing if the newly entered field is the same as the previous one",function(){return controller.onEditEmail(email),expect(controller.saveEmail).not.toHaveBeenCalled(),expect(controller.cancelEdit).toHaveBeenCalled()}),it("should call cancelEdit if email is not valid",function(){return controller.onEditEmail("not valid email"),expect(controller.cancelEdit).toHaveBeenCalled()}),it("should call accountApi.changeEmail if email is valid",function(){return controller.onEditEmail("valid@email.tk"),expect(controller.saveEmail).toHaveBeenCalled()})}),describe("Change country code",function(){var cellphone,countryCode;return countryCode=null,cellphone=null,beforeEach(function(){return countryCode="1",cellphone="123-234-3456",controller.getCurrentCellphone=function(){return cellphone},controller.getCurrentCountryCode=function(){return countryCode}}),it("should do nothing if the newly entered field is the same as the previous one",function(){return controller.onEditPhoneNumber(countryCode,cellphone),expect(controller.savePhone).not.toHaveBeenCalled(),expect(controller.cancelEdit).toHaveBeenCalled()}),it("should call cancelEdit if country code is not valid",function(){return controller.onEditPhoneNumber("not valid country code","123234"),expect(controller.cancelEdit).toHaveBeenCalled()}),it("should call cancelEdit if phone is not valid",function(){return controller.onEditPhoneNumber("1","invalid phone"),expect(controller.cancelEdit).toHaveBeenCalled()}),it("should call savePhone if phone and countyr code are valid",function(){return controller.onEditPhoneNumber("1","12-323-4345"),expect(controller.savePhone).toHaveBeenCalled()})}),describe("getCurrentEmail",function(){return it("should return the email that is associated with the current user",function(){})})})}),require(["controllers/account_ready_controller","models/apps/master_token","models/apps/health_check","workers/gen_encryption_key_task","ui/router","ui/widgets/dialog","test/mock/mock_dialog","exceptions/missing_param_exception"],function(AccountReadyController,MasterToken,HealthCheck,GenEncryptionKeyTask,Router,Dialog,MockDialog,MissingParamException){return describe("AccountReadyController",function(){var controller,healthCheck;return controller=null,healthCheck=HealthCheck.get(),beforeEach(function(){return controller=new AccountReadyController}),describe("show",function(){return it("Should return an exception if the params are invalid",function(){var params,verifyParams;return spyOn(MasterToken,"initialize"),params={userId:null,deviceId:"7",secretSeed:"abc",selectAuthTypeDate:new Date},verifyParams=function(){return controller.show(params)},expect(verifyParams).toThrow(new MissingParamException("the parameter 'userId' is not present")),expect(MasterToken.initialize).not.toHaveBeenCalled()}),it("Should initialize the MasterToken",function(){var params;return spyOn(healthCheck,"run"),spyOn(Dialog,"progress"),spyOn(MasterToken,"initialize"),spyOn(HealthCheck,"get").andCallFake(function(){return healthCheck}),spyOn(GenEncryptionKeyTask,"get").andCallFake(function(){return{whenFinished:function(){}}}),params={userId:"1",deviceId:"7",secretSeed:"abc",selectAuthTypeDate:new Date},controller.show(params),expect(Dialog.progress).toHaveBeenCalledWith("dark","Loading account"),expect(MasterToken.initialize).toHaveBeenCalledWith("1","7","abc"),expect(healthCheck.run).toHaveBeenCalled(),expect(GenEncryptionKeyTask.get).toHaveBeenCalled()})})})}),require(["controllers/backups_password_controller","models/apps/backups_password_model","helpers/window_helper","models/apps/app_manager","ui/router","ui/widgets/dialog","test/mock/mock_dialog"],function(BackupsPasswordController,BackupsPasswordModel,WindowHelper,AppManager,Router,Dialog,MockDialog){return describe("BackupsPasswordController",function(){var controller;return controller=null,beforeEach(function(){return MockDialog.mock(),controller=new BackupsPasswordController}),afterEach(function(){return MockDialog.unmock()}),describe("Constructor method",function(){return it("Should be defined",function(){return expect(controller.backupsPasswordView).toBeDefined(),expect(controller.backupsPasswordView.onSetPassword).toEqual(jasmine.any(Function))})}),describe("Show Method",function(){return it("Should render the backups password view",function(){return spyOn(WindowHelper,"setSize"),spyOn(controller.backupsPasswordView,"render"),controller.show({}),expect(WindowHelper.setSize).toHaveBeenCalledWith({width:550,height:480}),expect(controller.backupsPasswordView.render).toHaveBeenCalledWith({notDisplaySettings:!0})})}),describe("onSetPassword method",function(){return it("Should use the Dialog progress",function(){return spyOn(Dialog,"progress"),controller.onSetPassword("password"),expect(Dialog.progress.mostRecentCall.args[0]).toEqual("light"),expect(Dialog.progress.mostRecentCall.args[1]).toEqual("Setting backups password<br>This can take a minute"),expect(Dialog.progress.mostRecentCall.args[2]).toEqual(jasmine.any(Function))}),it("Should set the password on BackupsPasswordModel",function(){var appManager,onSuccessDialog,onSuccessSetPassword;return appManager=jasmine.createSpyObj("appManager",["updateAuthenticatorAppsPasswordTimestamp","updateEncryptedSeeds","uploadAuthenticatorApps","save"]),spyOn(Dialog,"progress"),spyOn(BackupsPasswordModel,"setPassword"),spyOn(AppManager,"get").andCallFake(function(){return appManager}),spyOn(Router.get(),"goTo"),spyOn(Dialog,"close"),spyOn(Dialog,"simple"),controller.onSetPassword("password"),onSuccessDialog=Dialog.progress.mostRecentCall.args[2],onSuccessDialog.call(),expect(BackupsPasswordModel.setPassword.mostRecentCall.args[0]).toEqual("password"),onSuccessSetPassword=BackupsPasswordModel.setPassword.mostRecentCall.args[1],onSuccessSetPassword.call(),expect(AppManager.get).toHaveBeenCalled(),expect(appManager.updateAuthenticatorAppsPasswordTimestamp).toHaveBeenCalled(),expect(appManager.updateEncryptedSeeds).toHaveBeenCalled(),expect(appManager.uploadAuthenticatorApps).toHaveBeenCalled(),expect(appManager.save).toHaveBeenCalled(),expect(Dialog.close).toHaveBeenCalled(),expect(Dialog.simple).toHaveBeenCalledWith("light","The password has been set."),expect(Router.get().goTo).toHaveBeenCalledWith("SettingsController",jasmine.any(Object))})})})}),require(["controllers/change_phone_confirmation_controller","ui/widgets/dialog","test/mock/mock_dialog","exceptions/missing_param_exception","test/mock/apis/mock_account_api"],function(ChangePhoneConfirmationController,Dialog,MockDialog,MissingParamException,MockAccountApi){return describe("ChangePhoneConfirmationController",function(){var api,controller;return controller=null,api=new MockAccountApi,beforeEach(function(){return controller=new ChangePhoneConfirmationController,controller.accountApi=api,controller.newCountryCode="1",controller.newCellphone="333-333-33333"}),describe("show method",function(){return it("Should return an exception if the params are invalid",function(){var params,verifyParams;return params={newCountryCode:controller.newCountryCode,newCellphone:controller.newCellphone},verifyParams=function(){return controller.show(params)},expect(verifyParams).toThrow(new MissingParamException("the parameter 'userInfoModel' is not present"))}),it("Should set the params and render",function(){var params;return spyOn(controller.changePhoneConfirmationView,"render"),params={newCountryCode:"1",newCellphone:"333-333-33333",userInfoModel:{}},controller.show(params),expect(controller.newCountryCode).toEqual(params.newCountryCode),expect(controller.newCellphone).toEqual(params.newCellphone),expect(controller.userInfoModel).toEqual(params.userInfoModel),expect(controller.changePhoneConfirmationView.render).toHaveBeenCalled()})}),describe("requestConfirmationPin method",function(){return it("Should display a dialog with the error",function(){return spyOn(Dialog,"error"),api.shouldFail({message:"Couldn't send pin via sms. Please try again later."}),controller.requestConfirmationPin("sms"),expect(Dialog.error).toHaveBeenCalledWith("light","Couldn't send pin via sms. Please try again later.")}),it("Should display a dialog with the confirmation message",function(){return spyOn(Dialog,"simple"),api.shouldSucceed({message:"Text message was sent."}),controller.requestConfirmationPin("sms"),expect(Dialog.simple).toHaveBeenCalledWith("light","Text message was sent.")})}),describe("confirmChangePhone method",function(){return it("Should display a dialog with confirmation message",function(){return spyOn(Dialog,"simple"),controller.userInfoModel=jasmine.createSpyObj("userInfoModel",["setCountryCode","setCellphone","save","notifyListeners"]),api.shouldSucceed({message:"Your cellphone has been changed."}),controller.confirmChangePhone("123456"),expect(controller.userInfoModel.setCountryCode).toHaveBeenCalledWith(controller.newCountryCode),expect(controller.userInfoModel.setCellphone).toHaveBeenCalledWith(controller.newCellphone),expect(controller.userInfoModel.save).toHaveBeenCalled(),expect(controller.userInfoModel.notifyListeners).toHaveBeenCalled(),expect(Dialog.simple).toHaveBeenCalledWith("light","Your cellphone has been changed.")}),it("Should display a dislog with the error",function(){return spyOn(Dialog,"error"),api.shouldFail({message:"Unable to change your cellphone. Please contact support@authy.com for further help."}),controller.confirmChangePhone("123456"),expect(Dialog.error).toHaveBeenCalledWith("light","Unable to change your cellphone. Please contact support@authy.com for further help.")})})})}),require(["controllers/create_authenticator_account_controller","test/mock/mock_chrome_storage","ui/router","ui/widgets/dialog","controllers/a_controller"],function(CreateAuthenticatorAccountController,MockChromeStorage,Router,Dialog,Controller){return describe("CreateAuthenticatorAccountController",function(){var controller;return controller=null,beforeEach(function(){return MockChromeStorage.mock(),MockChromeStorage.clear(),Router.get().register("UpdateAuthAppController",new Controller),controller=new CreateAuthenticatorAccountController,controller.appManager.clear(),spyOn(Router.get(),"goTo")}),describe("onCreateAccount",function(){return it("should go the UpdateAuthAppController when the secret is ok",function(){return controller.onCreateAccount("AAAAAAAAAAAAAAAA"),expect(Router.get().goTo).toHaveBeenCalledWith("UpdateAuthAppController",{secret:"AAAAAAAAAAAAAAAA",newAccount:!0})}),it("should clean the secret before sending it to the UpdateAuthAppController",function(){return controller.onCreateAccount(" AAAA AAAA AAAA AAAA "),expect(Router.get().goTo).toHaveBeenCalledWith("UpdateAuthAppController",{secret:"AAAAAAAAAAAAAAAA",newAccount:!0})}),it("should notify the user if the secret is not valid",function(){return spyOn(Dialog,"error"),controller.onCreateAccount("@#$%invalid auhtenticator account"),expect(controller.isSecretValid("invalid auhtenticator account")).toEqual(!1),expect(Dialog.error).toHaveBeenCalled()})})})}),require(["controllers/device_request_controller","test/mock/apis/mock_devices_api","test/mock/mock_dialog","ui/widgets/dialog"],function(DeviceRequestController,MockDevicesApi,MockDialog,Dialog){return describe("DeviceRequestController",function(){var deviceRequestController;return deviceRequestController=null,beforeEach(function(){return MockDialog.mock(),deviceRequestController=new DeviceRequestController({devicesApi:new MockDevicesApi,deviceRequestView:{}}),jasmine.Clock.useMock()}),it("should have defined dependencies",function(){return[DeviceRequestController].forEach(function(i){return expect(i).toBeDefined()})}),describe("onActionSuccess",function(){return beforeEach(function(){return spyOn(Dialog,"simpleWithoutButtons"),spyOn(Dialog,"close"),spyOn(deviceRequestController,"goBack")}),it("should set device request present to false on the model",function(){return deviceRequestController.onActionSuccess(),expect(deviceRequestController.deviceRequestModel.isDeviceRequestPresent()).toEqual(!1)}),it("should display the appropriate dialog",function(){return deviceRequestController.onActionSuccess({},"The new device has been accepted","Device Accepted"),expect(Dialog.simpleWithoutButtons).toHaveBeenCalledWith(Dialog.LIGHT,"The new device has been accepted","Device Accepted")}),it("should close the dialog and go back",function(){return deviceRequestController.onActionSuccess({},"The new device has been accepted","Device Accepted"),jasmine.Clock.tick(501),expect(Dialog.close).toHaveBeenCalled(),expect(deviceRequestController.goBack).toHaveBeenCalled()}),afterEach(function(){return jasmine.Clock.tick(501)})}),describe("onActionFail",function(){return beforeEach(function(){return spyOn(Dialog,"error")}),it("should display the appropriate dialog",function(){return deviceRequestController.onActionFail({},""),expect(Dialog.error).toHaveBeenCalledWith(Dialog.LIGHT,"","Error!",deviceRequestController.goBack)})}),describe("onAcceptDevice",function(){return beforeEach(function(){return spyOn(deviceRequestController,"onActionSuccess"),spyOn(deviceRequestController,"onActionFail")}),it("should call onActionSuccess when succesful",function(){return deviceRequestController.devicesApi.shouldSucceed({}),deviceRequestController.onAcceptDevice(),expect(deviceRequestController.onActionSuccess).toHaveBeenCalledWith({},"The new device has been accepted","Device Accepted")}),it("should call onActionFail when unsuccesful",function(){return deviceRequestController.devicesApi.shouldFail({}),deviceRequestController.onAcceptDevice(),expect(deviceRequestController.onActionFail).toHaveBeenCalledWith({},"Could not accept the new device")})}),describe("onRejectDevice",function(){return beforeEach(function(){return spyOn(deviceRequestController,"onActionSuccess"),spyOn(deviceRequestController,"onActionFail")}),it("should call onActionSuccess when succesful",function(){return deviceRequestController.devicesApi.shouldSucceed({}),deviceRequestController.onRejectDevice(),expect(deviceRequestController.onActionSuccess).toHaveBeenCalledWith({},"The new device has been rejected","Device Rejected")}),it("should call onActionFail when unsuccesful",function(){return deviceRequestController.devicesApi.shouldFail({}),deviceRequestController.onRejectDevice(),expect(deviceRequestController.onActionFail).toHaveBeenCalledWith({},"Could not reject the new device")})}),afterEach(function(){return MockDialog.unmock()})})}),require(["controllers/external_accounts_controller","test/mock/mock_chrome_storage","ui/router","ui/widgets/dialog","controllers/a_controller"],function(ExternalAccountsController,MockChromeStorage,Router,Dialog,Controller){return describe("ExternalAccountsController",function(){var controller;return controller=null,beforeEach(function(){return MockChromeStorage.mock(),MockChromeStorage.clear(),controller=new ExternalAccountsController,spyOn(Router.get(),"goTo")}),describe("show",function(){return it("should call render ",function(){return spyOn(controller,"render"),controller.show({apps:[]}),expect(controller.render).toHaveBeenCalled()})}),describe("showApp",function(){return it("should go to UpdateAuthAppController when called",function(){var appId;return Router.get().register("UpdateAuthAppController",new Controller),appId="fubar",controller.showApp(appId),expect(Router.get().goTo).toHaveBeenCalledWith("UpdateAuthAppController",{appId:appId,newAccount:!1})})}),describe("changeBackupsPassword",function(){}),describe("changeMasterPassword",function(){})})}),require(["controllers/registration_controller","models/analytics/initialize_registration_event","test/mock/apis/mock_registration_api"],function(RegistrationController,InitializeRegistrationEvent,MockRegistrationApi){return describe("RegistrationController",function(){var api,controller;return api=new MockRegistrationApi,controller=new RegistrationController({registrationApi:api,initRegistrationEvent:{setData:function(){},setUserProperties:function(){},send:function(){}}}),beforeEach(function(){}),it("should be defined",function(){return expect(RegistrationController).toBeDefined(),expect(MockRegistrationApi).toBeDefined(),expect(jasmine).toBeDefined()}),describe("getDeviceStatus",function(){return it("should call getDeviceStatus with correct params when api is successful",function(){return spyOn(controller,"onDeviceStatusSuccess"),api.shouldSucceed(0,"new",1234),controller.getDeviceStatus("1","123-123-1234"),expect(controller.onDeviceStatusSuccess).toHaveBeenCalled()}),it("should call registrationView.showFailDialog when the response fails",function(){return spyOn(controller.registrationView,"showFailDialog"),api.shouldFail({message:"error",success:"false"}),controller.getDeviceStatus("1","123-123-1234"),expect(controller.registrationView.showFailDialog).toHaveBeenCalled()})}),describe("onDeviceStatusSuccess",function(){return it("should display the email section if the user is new",function(){return spyOn(controller.registrationView,"goToEmailSection"),controller.onDeviceStatusSuccess(void 0,"new",void 0,"1","123-1234"),expect(controller.registrationView.goToEmailSection).toHaveBeenCalled()}),it("should display the verification section if the user is not new",function(){return spyOn(controller.registrationView,"goToVerificationSection"),spyOn(controller,"goTo"),controller.onDeviceStatusSuccess(1,"active","1234","1","123-1234"),expect(controller.registrationView.goToVerificationSection).toHaveBeenCalled(),expect(controller.goTo).toHaveBeenCalledWith("RegistrationPinController",{userId:"1234",countryCode:"1",cellphone:"123-1234"})}),it("should send init_registration event to mixpanel if the user is not new",function(){return spyOn(controller.initRegistrationEvent,"setUserProperties"),spyOn(controller.initRegistrationEvent,"send"),spyOn(controller.registrationView,"goToVerificationSection"),spyOn(controller,"goTo"),controller.onDeviceStatusSuccess(1,"active","1234","1","123-1234"),expect(controller.initRegistrationEvent.setUserProperties).toHaveBeenCalledWith("1234"),expect(controller.initRegistrationEvent.send).toHaveBeenCalled()})}),describe("createAccount",function(){return it("should should call registrationView.showFailDialog when the response fails",function(){return spyOn(controller.registrationView,"showFailDialog"),api.shouldFail({message:"error",success:"false"}),controller.createAccount("1","123-123-1234"),expect(controller.registrationView.showFailDialog).toHaveBeenCalledWith("error")}),it("should call goToVerificationSection when an account is created",function(){return spyOn(controller.registrationView,"goToVerificationSection"),spyOn(controller,"goTo"),api.shouldSucceed("1234"),controller.createAccount("1","123-1234","a@b.com"),expect(controller.registrationView.goToVerificationSection).toHaveBeenCalled()}),it("should send init_registration event to mixpanel when account is created",function(){return spyOn(controller.initRegistrationEvent,"setUserProperties"),spyOn(controller.initRegistrationEvent,"send"),spyOn(controller.registrationView,"goToVerificationSection"),spyOn(controller,"goTo"),api.shouldSucceed("1234"),controller.createAccount("1","123-1234","a@b.com"),expect(controller.initRegistrationEvent.setUserProperties).toHaveBeenCalledWith("1234"),expect(controller.initRegistrationEvent.send).toHaveBeenCalled()})})})}),require(["controllers/registration_pin_controller","test/mock/apis/mock_registration_api","ui/router","ui/widgets/dialog","test/mock/mock_dialog","helpers/date_helper"],function(RegistrationPinController,MockRegistrationApi,Router,Dialog,MockDialog,DateHelper){return describe("RegistrationPinController",function(){var api,controller,date;return controller=null,api=new MockRegistrationApi,date=new Date,DateHelper.getCurrentDateObject=function(){return date},beforeEach(function(){return MockDialog.mock(),controller=new RegistrationPinController({registrationApi:api,selectAuthTypeEvent:{setData:function(){},send:function(){}}}),controller.userId="2",controller.signature="UsxBi4rnFbalkl5teYgDehzafWVdSsNW",controller.countryCode="1",controller.cellphone="111-111-1111"}),afterEach(function(){return MockDialog.unmock()}),it("should be defined",function(){return expect(RegistrationPinController).toBeDefined(),expect(MockRegistrationApi).toBeDefined()}),describe("Request PIN method",function(){return it("should call createNewDeviceRequest method",function(){return spyOn(api,"createNewDeviceRequest"),controller.requestPin("push",function(){},function(){}),expect(api.createNewDeviceRequest).toHaveBeenCalled()}),it("should call send select_auth_type event to mixpanel",function(){return spyOn(controller.selectAuthTypeEvent,"setData"),spyOn(controller.selectAuthTypeEvent,"send"),api.shouldSucceed("Server message.","123456","54","twilio"),controller.requestPin("sms",function(){},function(){}),expect(controller.selectAuthTypeEvent.setData).toHaveBeenCalledWith({provider:"twilio",authType:"sms"}),expect(controller.selectAuthTypeEvent.send).toHaveBeenCalled(),expect(controller.selectAuthTypeDate).toEqual(date)})}),describe("Request a PIN via SMS",function(){return it("Should use the requestPin method",function(){return spyOn(controller,"requestPin"),controller.requestSmsPin(),expect(controller.requestPin).toHaveBeenCalled(),expect(controller.requestPin.mostRecentCall.args[0]).toEqual("sms")}),it("should send the SMS",function(){return spyOn(controller.registrationView,"goToSmsSection"),api.shouldSucceed("PIN was sent via text-message. Please allow at least 1 minute 6 for  the text to arrive.","123456","54","twilio"),controller.requestSmsPin(),expect(controller.registrationView.goToSmsSection).toHaveBeenCalled()}),it("should return an error",function(){var txtMsg;return spyOn(controller.registrationView,"showFailDialog"),txtMsg="Seems like our SMS are not arriving, please try a phone call verification instead.",api.shouldFail({message:txtMsg}),controller.requestSmsPin(),expect(controller.registrationView.showFailDialog).toHaveBeenCalledWith(txtMsg)})}),describe("Request a PIN via CALL",function(){return it("should use the requestPin method",function(){return spyOn(controller,"requestPin"),controller.requestCallPin(),expect(controller.requestPin).toHaveBeenCalled(),expect(controller.requestPin.mostRecentCall.args[0]).toEqual("call")}),it("should redirect to waiting for approval section",function(){var routerData;return spyOn(controller.registrationView,"goToCallSection"),spyOn(Router.get(),"goTo"),api.shouldSucceed("Call started...","123456","54","twilio"),controller.requestCallPin(),expect(controller.registrationView.goToCallSection).toHaveBeenCalledWith("54"),routerData={signature:controller.signature,requestId:"123456",userId:controller.userId,selectAuthTypeDate:date},expect(Router.get().goTo).toHaveBeenCalledWith("WaitingForConfirmationController",routerData)}),it("should display a dialog with the error",function(){var txtMsg;return spyOn(controller.registrationView,"showFailDialog"),txtMsg="There was an error starting the call. Please check if your phone number is correct.",api.shouldFail({message:txtMsg}),controller.requestCallPin(),expect(controller.registrationView.showFailDialog).toHaveBeenCalledWith(txtMsg)})}),describe("Request a PIN via PUSH",function(){return it("should use the requestPin method",function(){return spyOn(controller,"requestPin"),controller.requestPushPin(),expect(controller.requestPin).toHaveBeenCalled(),expect(controller.requestPin.mostRecentCall.args[0]).toEqual("push")}),it("should send a push notification",function(){var routerData;return spyOn(controller.registrationView,"goToPushSection"),spyOn(Router.get(),"goTo"),api.shouldSucceed("A request was sent to your other devices.","123456","54","twilio"),controller.requestPushPin(),expect(controller.registrationView.goToPushSection).toHaveBeenCalled(),routerData={signature:controller.signature,requestId:"123456",userId:"2",selectAuthTypeDate:date},expect(Router.get().goTo).toHaveBeenCalledWith("WaitingForConfirmationController",routerData)}),it("should display a dialog with the error",function(){return spyOn(controller.registrationView,"showFailDialog"),api.shouldFail({message:"Error"}),controller.requestPushPin(),expect(controller.registrationView.showFailDialog).toHaveBeenCalledWith("Error","Unable verify via device")})}),describe("Verify and register the device",function(){return it("should register new device on API",function(){return spyOn(api,"registerNewDevice"),controller.verifyAndRegisterDevice("990789"),expect(api.registerNewDevice).toHaveBeenCalled()}),it("should register the device",function(){return spyOn(Dialog,"close"),spyOn(controller,"onRegisterSuccessful"),api.shouldSucceed(controller.userId,"3","32168296aeacf8b44abd067ad781b8ea"),controller.verifyAndRegisterDevice("990789"),expect(Dialog.close).toHaveBeenCalled(),expect(controller.onRegisterSuccessful).toHaveBeenCalledWith(controller.userId,"3","32168296aeacf8b44abd067ad781b8ea")}),it("should not register the device if the pin is invalid",function(){var txtMsg;return spyOn(Dialog,"close"),spyOn(controller.registrationView,"showFailDialog"),txtMsg="Wrong PIN. Try again. Note that the PIN can only be used once.",api.shouldFail({message:txtMsg}),controller.verifyAndRegisterDevice("990789"),expect(Dialog.close).toHaveBeenCalled(),expect(controller.registrationView.showFailDialog).toHaveBeenCalled()})}),describe("Finish the register",function(){return it("should display the accounts if the register is sucessful",function(){var routerData;return spyOn(Router.get(),"goTo"),routerData={userId:controller.userId,deviceId:"5",secretSeed:"32168296aeacf8b44abd067ad781b8ea",selectAuthTypeDate:date},controller.onRegisterSuccessful(controller.userId,"5","32168296aeacf8b44abd067ad781b8ea",date),expect(Router.get().goTo).toHaveBeenCalledWith("AccountReadyController",routerData)})})})}),require(["controllers/settings_controller"],function(SettingsController){return describe("SettingsController",function(){var settingsController;return settingsController=new SettingsController,it("should be defined correctly",function(){return expect(settingsController.settingsView).not.toBe(null),expect(settingsController.settingsView).toBeDefined()})})}),require(["controllers/tokens_controller","test/mock/mock_chrome_storage","ui/router","ui/widgets/dialog","models/apps/authy_rsa_key","controllers/a_controller"],function(TokensController,MockChromeStorage,Router,Dialog,AuthyRSAKey,Controller){return describe("TokensController",function(){var controller;return controller=null,beforeEach(function(){return controller=new TokensController}),it("should be defined",function(){return expect(controller.tokensView).toBeDefined(),expect(controller.tokensView.cachingEnabled).toBe(!0),expect(controller.appManager).toBeDefined(),expect(controller.syncHelper).toBeDefined()}),describe("show method",function(){return beforeEach(function(){return spyOn(controller.syncHelper,"sync"),spyOn(controller.appManager,"syncApps"),spyOn(controller,"updateAssets"),spyOn(AuthyRSAKey,"downloadPrivateKey"),spyOn(controller,"setSize")}),it("should start the timer and invalidate the cache",function(){return spyOn(controller.googleAuthTimer,"startTimer"),spyOn(controller.authyTimer,"startTimer"),controller.show(),expect(controller.googleAuthTimer.startTimer).toHaveBeenCalled(),expect(controller.authyTimer.startTimer).toHaveBeenCalled(),expect(controller.tokensView.cacheValid).toBe(!1),expect(controller.syncHelper.sync).toHaveBeenCalled(),expect(controller.appManager.syncApps).toHaveBeenCalled(),expect(AuthyRSAKey.downloadPrivateKey).toHaveBeenCalled(),expect(controller.setSize).toHaveBeenCalledWith({x:320,y:590})}),it("should call onAppsChanged if it needs to pre render",function(){return spyOn(controller,"notOpeningAppFirstTime").andReturn(!0),spyOn(controller,"onAppsChanged"),controller.show(),expect(controller.onAppsChanged).toHaveBeenCalled()}),it("should not call onAppsChanged if it does not need to pre render",function(){return spyOn(controller,"notOpeningAppFirstTime").andReturn(!1),spyOn(controller,"onAppsChanged"),controller.show(),expect(controller.onAppsChanged).not.toHaveBeenCalled()})}),describe("onAddAccount",function(){return it("should go to the settings controller",function(){var router;return router=Router.get(),router.register("SettingsController",new Controller),spyOn(router,"goTo"),controller.onAddAccount(),expect(router.goTo).toHaveBeenCalledWith("SettingsController",{innerView:"CreateAuthenticatorAccountController",selectedTab:"tabHeaderExternalAccounts"})})}),describe("notOpeningAppFirstTime",function(){return it("should return false if coming from AccountReadyController (i.e. just registered)",function(){return expect(controller.notOpeningAppFirstTime({lastController:"AccountReadyController"})).toEqual(!1)}),it("should return false if coming from UnblockController (i.e. just entered master password)",function(){return expect(controller.notOpeningAppFirstTime({lastController:"UnblockController"})).toEqual(!1)}),it("should return false if just opened app (i.e. no master password)",function(){return expect(controller.notOpeningAppFirstTime({lastController:null})).toEqual(!1)}),it("should return true if coming from settings",function(){return expect(controller.notOpeningAppFirstTime({lastController:"SettingsController"})).toEqual(!0)}),it("should return true if coming from account settings",function(){return expect(controller.notOpeningAppFirstTime({lastController:"AccountController"})).toEqual(!0)})}),describe("performSyncs",function(){return beforeEach(function(){return spyOn(controller.syncHelper,"sync"),spyOn(controller.appManager,"loadLocal").andCallFake(function(cb){return"function"==typeof cb?cb():void 0})}),it("should load local apps if opening app and call syncs",function(){return spyOn(controller.appManager,"syncApps"),spyOn(controller,"notOpeningAppFirstTime").andReturn(!1),controller.performSyncs(),expect(controller.appManager.loadLocal).toHaveBeenCalled(),expect(controller.syncHelper.sync).toHaveBeenCalled(),expect(controller.appManager.syncApps).toHaveBeenCalled()}),it("should not load local apps if not opening app for the first time and call syncs",function(){return spyOn(controller.appManager,"syncApps"),spyOn(controller,"notOpeningAppFirstTime").andReturn(!0),controller.performSyncs(),expect(controller.appManager.loadLocal).not.toHaveBeenCalled(),expect(controller.syncHelper.sync).toHaveBeenCalled(),expect(controller.appManager.syncApps).toHaveBeenCalled()}),it("should only call updateAssets when syncApps is successful",function(){return spyOn(controller,"updateAssets"),spyOn(controller.appManager,"syncApps").andCallFake(function(options){return"function"==typeof options.onSuccess?options.onSuccess():void 0}),controller.performSyncs(),expect(controller.updateAssets).toHaveBeenCalled()}),it("should call onFailSync when syncApps fails",function(){return spyOn(controller,"onFailSync"),spyOn(controller.appManager,"syncApps").andCallFake(function(options){return"function"==typeof options.onFail?options.onFail():void 0}),controller.performSyncs(),expect(controller.onFailSync).toHaveBeenCalled()})})})}),require(["controllers/update_auth_app_controller","test/mock/mock_chrome_storage"],function(UpdateAuthAppController,MockChromeStorage){return describe("UpdateAuthAppController",function(){var appManager,controller;return controller=null,appManager=null,beforeEach(function(){return MockChromeStorage.mock(),controller=new UpdateAuthAppController,appManager=controller.appManager
}),it("Should upload the auth app with timestamp",function(){var app,appId;return spyOn(appManager,"save"),spyOn(appManager,"uploadAuthenticatorApp"),spyOn(appManager,"getPasswordTimestamp").andCallFake(function(){return 1397250647}),appId=appManager.createAuthenticatorApp("5b39cd9b62e3df3f160e6139c323258f"),controller.updateAuthApp(appId,"New Name","evernote"),expect(appManager.save).toHaveBeenCalled(),expect(appManager.getPasswordTimestamp).toHaveBeenCalled(),app=appManager.find(appId),expect(appManager.uploadAuthenticatorApp).toHaveBeenCalledWith(app),expect(app.name).toEqual("New Name"),expect(app.accountType).toEqual("evernote"),expect(app.passwordTimestamp).toEqual(1397250647),expect(app.uniqueId).not.toBe(null),expect(app.markedForDeletion).toEqual(!1)})})}),require(["controllers/waiting_for_confirmation_controller","test/mock/apis/mock_registration_api"],function(WaitingForConfirmationController,MockRegistrationApi){return describe("WaitingForConfirmationController",function(){var api,controller;return api=new MockRegistrationApi,controller=new WaitingForConfirmationController({regApi:api}),it("should have defined dependencies",function(){return[WaitingForConfirmationController,MockRegistrationApi,jasmine].forEach(function(i){return expect(i).toBeDefined()})}),it("should go back to phone section when get request status fails",function(){return spyOn(controller.registrationView,"showFailDialog").andCallFake(function(){return controller.registrationView.goToPhoneSection()}),spyOn(controller.registrationView,"goToPhoneSection"),api.shouldFail({message:"Api Error",success:"false"}),controller.startPollingForConfirmation("1","1"),expect(controller.registrationView.goToPhoneSection).toHaveBeenCalled()})})}),require(["helpers/app_helper","test/mock/mock_chrome_idle","ui/router"],function(AppHelper,MockChromeIdle,Router){return describe("AppHelper",function(){return beforeEach(function(){return MockChromeIdle.mock()}),describe("closeApp",function(){var callCount,cleanUpBeforeClose,instance;return instance=AppHelper.getPubSubInstance(),instance.cleanUpEncryptionKey=function(cb){return cb()},callCount=0,cleanUpBeforeClose=function(cb){return callCount++,cb()},beforeEach(function(){return instance.clearSusbscribers(),callCount=0,AppHelper.subscribeToCloseAppEvent({cleanUpBeforeClose:cleanUpBeforeClose}),AppHelper.subscribeToCloseAppEvent({cleanUpBeforeClose:cleanUpBeforeClose}),spyOn(Router.get(),"goTo").andReturn(!0)}),it("should notify all listeners that the app is closing and clean up encryption key",function(){return AppHelper.closeApp(),expect(AppHelper.LOCKING).toEqual(!1),expect(AppHelper.LOCKED).toEqual(!0),expect(callCount).toEqual(instance.closeAppEventSubscribers.length)}),it("should clean up encryption key and mark as LOCKING while the method is running",function(){var calledCleanEncKey;return calledCleanEncKey=!1,instance.cleanUpEncryptionKey=function(cb){return calledCleanEncKey=!0,expect(AppHelper.LOCKING).toEqual(!0),cb()},AppHelper.closeApp(),expect(calledCleanEncKey).toEqual(!0),expect(AppHelper.LOCKING).toEqual(!1),expect(AppHelper.LOCKED).toEqual(!0)}),it("should go to Unblock Controller upon completion",function(){return AppHelper.closeApp(),expect(Router.get().goTo).toHaveBeenCalledWith("UnblockController")})}),describe("addCloseAppEventListener",function(){return beforeEach(function(){return MockChromeIdle.listenerCount=0}),it("should add the listener for chrome close app event if there are no listeners",function(){return AppHelper.addCloseAppEventListener(),expect(MockChromeIdle.listenerCount).toEqual(1),expect(AppHelper.LOCKED).toEqual(!1)}),it("should add the listener for chrome close app event if there are no listeners",function(){return MockChromeIdle.listenerCount=1,AppHelper.addCloseAppEventListener(),expect(MockChromeIdle.listenerCount).toEqual(1),expect(AppHelper.LOCKED).toEqual(!1)})}),describe("removeCloseAppEventListener",function(){return it("should remove the listener for chrome close app event",function(){return MockChromeIdle.listenerCount=1,AppHelper.removeCloseAppEventListener(),expect(MockChromeIdle.listenerCount).toEqual(0),expect(AppHelper.LOCKED).toEqual(!0)})}),describe("onCloseAppEvent",function(){return beforeEach(function(){return spyOn(AppHelper,"closeApp").andCallFake(function(){return AppHelper.LOCKED=!0})}),it("should close the app if the new state is locked or idle, it is not already locked and not currently being locked",function(){return AppHelper.LOCKED=!1,AppHelper.LOCKING=!1,AppHelper.onCloseAppEvent("locked"),expect(AppHelper.closeApp).toHaveBeenCalled(),expect(AppHelper.LOCKED).toEqual(!0),AppHelper.LOCKED=!1,AppHelper.onCloseAppEvent("idle"),expect(AppHelper.closeApp.callCount).toEqual(2),expect(AppHelper.LOCKED).toEqual(!0)}),it("should not close app if the new state is different from idle or locked",function(){return AppHelper.LOCKED=!1,AppHelper.onCloseAppEvent("active"),expect(AppHelper.LOCKED).toEqual(!1),AppHelper.onCloseAppEvent("something else"),expect(AppHelper.LOCKED).toEqual(!1)}),it("should not close app if the is already closed/locked",function(){return AppHelper.LOCKED=!0,AppHelper.onCloseAppEvent("locked"),expect(AppHelper.closeApp.callCount).toEqual(0),AppHelper.onCloseAppEvent("idle"),expect(AppHelper.closeApp.callCount).toEqual(0)}),it("should not close app if it is currently being closed/locked",function(){return AppHelper.LOCKED=!1,AppHelper.closeApp.andCallFake(function(){return AppHelper.LOCKING=!0,setTimeout(function(){return AppHelper.LOCKED=!0,AppHelper.LOCKING=!1},500)}),AppHelper.onCloseAppEvent("idle"),expect(AppHelper.closeApp.callCount).toEqual(1),expect(AppHelper.LOCKING).toEqual(!0),expect(AppHelper.LOCKED).toEqual(!1),AppHelper.onCloseAppEvent("locked"),expect(AppHelper.closeApp.callCount).toEqual(1)})})})}),require(["helpers/async_helper"],function(AsyncHelper){return describe("AsyncHelper",function(){return describe("run",function(){return it("should call the callback with the normal return value if the function does not time-out",function(){var callback,f;return callback={cb:function(){}},spyOn(callback,"cb"),f=function(cb){return cb("foobar")},AsyncHelper.run({lambda:f,callback:callback.cb,defVal:"somdefval"}),expect(callback.cb).toHaveBeenCalledWith("foobar")}),it("should call the callback with the defVal if the function times out",function(){var callback,f,resp;return resp=null,callback=function(params){return resp=params},f=function(){},runs(function(){return AsyncHelper.run({lambda:f,callback:callback,defVal:"somdefval",timeout:1})}),waitsFor(function(){return null!==resp}),runs(function(){return expect(resp).toBe("somdefval")})})})})}),require(["helpers/crypto_helper"],function(CryptoHelper){return describe("CryptoHelper",function(){var encryptedSeed,password,qrContent,salt;return qrContent="SJUD4HNBZWEW7S46",encryptedSeed="PfgHadodNr+7nxtJJI96vzvMqkDWzBKIlA30ojrYJL4=",salt="WneKFUgFrRCq5fcLY26a5gSM34eVbQEa",password="qwerty",xit("should encrypt a qr-code correctly",function(){return expect(CryptoHelper.encryptAES(salt,password,qrContent)).toEqual(encryptedSeed)}),xit("should decrypt an encrypted OTP correctly",function(){return expect(CryptoHelper.decryptAES(salt,password,encryptedSeed)).toEqual(qrContent)}),xit("should throw an exception when decryption fails",function(){var failedEncryption;return failedEncryption=function(){return CryptoHelper.decryptAES(salt,"wrong password",encryptedSeed)},expect(failedEncryption).toThrow()}),xit("should create encryption PBKDF2 keys",function(){}),it("should not allow params other than string for the PBKDF2 key creation",function(){var anonymous;return anonymous=function(){return CryptoHelper.generatePBKDF2Key("password",CryptoHelper.generateSalt())},expect(anonymous).toThrow()}),it("should generate random word arrays for salting with default size of 32 bytes",function(){return salt=CryptoHelper.generateSalt(),expect(salt.sigBytes).toEqual(32)}),it("should generate alphanumeric random salts with default size of 32 bytes",function(){return salt=CryptoHelper.generateSalt().toString(),expect(salt.match(/[a-z0-9]{64}/)).not.toBeNull(),expect(salt.match(/[a-z0-9]{64}/)[0]).toEqual(salt)}),it("should generate salts convertible between strings and word arrays",function(){var saltString,wordArray;return salt=CryptoHelper.generateSalt(),saltString=salt.toString(),wordArray=CryptoHelper.constructWordArray(saltString),expect(wordArray.toString()).toEqual(saltString),expect(wordArray).toEqual(salt)})})}),require(["helpers/date_helper"],function(DateHelper){return describe("DateHelper",function(){return it("should have defined dependencies",function(){return[DateHelper].forEach(function(i){return expect(i).toBeDefined()})}),describe("getDateFromString",function(){return it("should parse the date string correctly",function(){var d,str;return str="2014-04-17T05:23:57Z",d=DateHelper.getDateFromString(str),expect(d.getYear()).toEqual(114),expect(d.getDate()).toEqual(17),expect(d.getMonth()).toEqual(3),expect(d.getUTCHours()).toEqual(5),expect(d.getMinutes()).toEqual(23),expect(d.getSeconds()).toEqual(57)})}),describe("areSameDay",function(){return it("should return true if they are the same day",function(){var d1,d2;return d1=DateHelper.getDateFromString("January 4 1991"),d2=DateHelper.getDateFromString("January 4 1991"),expect(DateHelper.areSameDay(d1,d2)).toBe(!0)}),it("should return false if they are not the same day",function(){var d1,d2;return d1=DateHelper.getDateFromString("January 4 1991"),d2=DateHelper.getDateFromString("January 5 1991"),expect(DateHelper.areSameDay(d1,d2)).toBe(!1)})}),describe("isDateYesterday",function(){return it("should return true if the date is yesterday",function(){var d,today;return today=DateHelper.getDateFromString("January 5 1991"),d=DateHelper.getDateFromString("January 4 1991"),expect(DateHelper.isDateYesterday(d,today)).toBe(!0)}),it("should return false if the date is not yesterday",function(){var d,today;return today=DateHelper.getDateFromString("January 5 1991"),d=DateHelper.getDateFromString("January 6 1991"),expect(DateHelper.isDateYesterday(d,today)).toBe(!1)})}),describe("isDateToday",function(){return it("should return true if the date is today",function(){var d,today;return today=DateHelper.getDateFromString("January 5 1991"),d=DateHelper.getDateFromString("January 5 1991"),expect(DateHelper.isDateToday(d,today)).toBe(!0)}),it("should return false if the date is not today",function(){var d,today;return today=DateHelper.getDateFromString("January 5 1991"),d=DateHelper.getDateFromString("January 6 1991"),expect(DateHelper.isDateToday(d,today)).toBe(!1)})}),describe("getDatePrettyFormat",function(){return it('should include "Today" in return value if the date is today',function(){var d,res,today;return today=DateHelper.getDateFromString("2014-04-17T05:23:57Z"),d=DateHelper.getDateFromString("April 17 2014"),res=DateHelper.getDatePrettyFormat(d,today),expect(res).toEqual("Today at 00:00")}),it('should include "Yesterday" in return value if the date is yesterday',function(){var d,res,today;return today=DateHelper.getDateFromString("2014-04-17T05:23:57Z"),d=DateHelper.getDateFromString("April 16 2014"),res=DateHelper.getDatePrettyFormat(d,today),expect(res).toEqual("Yesterday at 00:00")}),it("should return correct date string if the date is neither today nor yesterday",function(){var d,res,today;return today=DateHelper.getDateFromString("2014-04-17T05:23:57Z"),d=DateHelper.getDateFromString("April 9 2014"),res=DateHelper.getDatePrettyFormat(d,today),expect(res).toEqual("Apr 09 2014 at 00:00")})})})}),require(["helpers/encoder"],function(Encoder){return describe("a utility class that converts from various encodings",function(){return it("shoud convert from a Base32 string to a HEX string correctly",function(){return expect(Encoder.base32tohex("ABCDEFGHIJKLMNOPQRSTUVWX").toUpperCase()).toBe("00443214C74254B635CF84653A56D7"),expect(Encoder.base32tohex("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567").toUpperCase()).toBe("00443214C74254B635CF84653A56D7C675BE77DF")}),it("should be able to convert google authenticator codes correctly",function(){return expect(Encoder.base32tohex("JBSWY3DPEHPK3PXP").toUpperCase()).toBe("48656C6C6F21DEADBEEF")})})}),require(["helpers/encoding_helper"],function(EncodingHelper){return describe("EncodingHelper",function(){var expectClean,expectInvalidSecret,expectValidSecret;return expectInvalidSecret=function(secret){return expect(EncodingHelper.isValid(secret)).toBe(!1)},expectValidSecret=function(secret){return expect(EncodingHelper.isValid(secret)).toBe(!0)},expectClean=function(secret){return expect(EncodingHelper.clean(secret))},describe("isValid",function(){return it("should not be white space sensitive",function(){return expectValidSecret("   7YSR SRMX BSDO FEUG 5GSL 3KR7 TWNM      FFCA   "),expectValidSecret(" AA  AA    AA  AA    AA  AA    AA  AA   ")}),it("should not allow lower case",function(){return expectInvalidSecret("xs2p 7abf qris 24ge"),expectInvalidSecret("7ysrsrmxbsdofeug5gsl3kr7twnmffca"),expectInvalidSecret("AAAAAAAAAAAAAAAa"),expectInvalidSecret("aaaaaaaaaaaaaaaa"),expectInvalidSecret("aAaAaAaAaAaAaAaA")}),it("should not accept empty secrets",function(){return expectInvalidSecret("")}),it("should not accept null secret",function(){return expectInvalidSecret(null)}),it("should not accept undefined secrets",function(){return expectInvalidSecret(void 0)}),it("should accept valid secrets",function(){return expectValidSecret("XS2P 7ABF QRIS 24GE"),expectValidSecret("XS2P7ABFQRIS24GE"),expectValidSecret("7YSR SRMX BSDO FEUG 5GSL 3KR7 TWNM FFCA"),expectValidSecret("7YSRSRMXBSDOFEUG5GSL3KR7TWNMFFCA"),expectValidSecret("AAAA AAAA AAAA AAAA"),expectValidSecret("AAAAAAAAAAAAAAAA"),expectValidSecret("XS2P7ABFQRIS24GE"),expectValidSecret("XS2P 7ABF QRIS 24GE")})}),describe("clean",function(){return it("should return a version of the secret without spaces",function(){var secret;return secret="   7YSR SRMX BSDO FEUG 5GSL 3KR7 TWNM      FFCA   ",expectClean(secret).toBe("7YSRSRMXBSDOFEUG5GSL3KR7TWNMFFCA"),secret=" A A A A A A A A A A A A A A A A",expectClean(secret).toBe("AAAAAAAAAAAAAAAA"),secret="XS2P 7ABF QRIS 24GE",expectClean(secret).toBe("XS2P7ABFQRIS24GE")}),it("should return a version of the secret in uppercase",function(){var secret;return secret="xs2p7abfqris24ge",expectClean(secret).toBe("XS2P7ABFQRIS24GE"),secret="7ysrsrmxbsdofeug5gsl3kr7twnmffca",expectClean(secret).toBe("7YSRSRMXBSDOFEUG5GSL3KR7TWNMFFCA"),secret="AAAAAAAAAAAAAAAa",expectClean(secret).toBe("AAAAAAAAAAAAAAAA"),secret="aaaaaaaaaaaaaaaa",expectClean(secret).toBe("AAAAAAAAAAAAAAAA"),secret="aAaAaAaAaAaAaAaA",expectClean(secret).toBe("AAAAAAAAAAAAAAAA")})}),describe("",function(){})})}),require(["helpers/hash_set"],function(HashSet){return describe("HashSet is a collection that promises O(1) for adding,        clearing, removing and contains",function(){var mock1,mock2,mock3;return mock1={id:"1",name:"bob"},mock2={id:"2",name:"joe"},mock3={id:"3",name:"lucy"},it("should be able to add elements",function(){var hashSet;return hashSet=new HashSet,hashSet.add(mock1),hashSet.add(mock2),expect(hashSet.toArray().length).toBe(2),expect(hashSet.toArray()).toContain(mock1),expect(hashSet.toArray()).toContain(mock2),expect(hashSet.toArray()).not.toContain(mock3)}),it("should not be able to hold repeated element",function(){var hashSet;return hashSet=new HashSet,hashSet.add(mock1),hashSet.add(mock2),hashSet.add(mock1),hashSet.add(mock2),expect(hashSet.toArray().length).toBe(2)}),it("should be able to remove elements",function(){var hashSet;return hashSet=new HashSet,hashSet.add(mock1),hashSet.add(mock2),hashSet.add(mock3),hashSet.remove(mock1),expect(hashSet.toArray().length).toBe(2),expect(hashSet.toArray()).not.toContain(mock1)}),it("should be able to tell if an element with a given id belongs or not to the collection",function(){var hashSet;return hashSet=new HashSet,expect(hashSet.toArray()).not.toContain(mock1),expect(hashSet.toArray()).not.toContain(mock2),expect(hashSet.toArray()).not.toContain(mock3),hashSet.add(mock1),hashSet.add(mock2),hashSet.add(mock3),expect(hashSet.toArray()).toContain(mock1),expect(hashSet.toArray()).toContain(mock2),expect(hashSet.toArray()).toContain(mock3),hashSet.remove(mock1),expect(hashSet.toArray()).not.toContain(mock1),hashSet.remove(mock2),expect(hashSet.toArray()).not.toContain(mock2),hashSet.remove(mock3),expect(hashSet.toArray()).not.toContain(mock3)}),it("should be empty initially",function(){var hashSet;return hashSet=new HashSet,expect(hashSet.elementsIds).toBeDefined(),expect(hashSet.elementsIds).toEqual({})})})}),require(["helpers/hotp","helpers/totp","helpers/encoder"],function(HOTP,TOTP,Encoder){return describe("HOTP counter based token generator, as defined in RFC 4226",function(){var secret;return secret="3132333435363738393031323334353637383930",it("should pass RFC test case 1",function(){return expect(HOTP.hotp(secret,"0000000000000000")).toBe(1284755224)}),it("should pass RFC test case 2",function(){return expect(HOTP.hotp(secret,"0000000000000001")).toBe(1094287082)}),it("should pass RFC test case 3",function(){return expect(HOTP.hotp(secret,"0000000000000002")).toBe(137359152)}),it("should pass RFC test case 4",function(){return expect(HOTP.hotp(secret,"0000000000000003")).toBe(1726969429)}),it("should pass RFC test case 5",function(){return expect(HOTP.hotp(secret,"0000000000000004")).toBe(1640338314)}),it("should pass RFC test case 6",function(){return expect(HOTP.hotp(secret,"0000000000000005")).toBe(868254676)}),it("should pass RFC test case 7",function(){return expect(HOTP.hotp(secret,"0000000000000006")).toBe(1918287922)}),it("should pass RFC test case 8",function(){return expect(HOTP.hotp(secret,"0000000000000007")).toBe(82162583)}),it("should pass RFC test case 9",function(){return expect(HOTP.hotp(secret,"0000000000000008")).toBe(673399871)}),it("should pass RFC test case 10",function(){return expect(HOTP.hotp(secret,"0000000000000009")).toBe(645520489)}),it("should truncate correctly according to RFC truncation example",function(){return expect(HOTP.truncate("1f8698690e02ca16618550ef7f19da8e945b555a")).toBe(1357872921),expect(HOTP.truncate("0123456789abcdef0123456789abcdef01234567")).toBe(1862345541)})}),describe("TOTP a time based HOTP, as defined by RFC 6238",function(){var secret;return secret="3132333435363738393031323334353637383930",it("should generate time correctly according to RFC test cases",function(){return expect(TOTP.time(0,0,30)).toBe("0000000000000000"),expect(TOTP.time(59,0,30)).toBe("0000000000000001"),expect(TOTP.time(1111111109,0,30)).toBe("00000000023523ec"),expect(TOTP.time(1111111111,0,30)).toBe("00000000023523ed"),expect(TOTP.time(1234567890,0,30)).toBe("000000000273ef07"),expect(TOTP.time(2e9,0,30)).toBe("0000000003f940aa"),expect(TOTP.time(2e10,0,30)).toBe("0000000027bc86aa")}),it("should generate correct otps according to RFC test case 1",function(){return expect(TOTP.totp(secret,"0000000000000001",8)).toBe("94287082")}),it("should generate correct otps according to RFC test case 2",function(){return expect(TOTP.totp(secret,"00000000023523ec",8)).toBe("07081804")}),it("should generate correct otps according to RFC test case 3",function(){return expect(TOTP.totp(secret,"00000000023523ed",8)).toBe("14050471")}),it("should generate correct otps according to RFC test case 4",function(){return expect(TOTP.totp(secret,"000000000273ef07",8)).toBe("89005924")}),it("should generate correct otps according to RFC test case 5",function(){return expect(TOTP.totp(secret,"0000000003f940aa",8)).toBe("69279037")}),it("should generate correct otps according to RFC test case 6",function(){return expect(TOTP.totp(secret,"0000000027bc86aa",8)).toBe("65353130")}),it("should generate correct otp for AMAZON secret",function(){return secret="R5ZOHDWKTQFDGAPC",secret=Encoder.base32tohex(secret).toUpperCase(),expect(TOTP.totp(secret,"0000000000000000",6)).toBe("250273"),expect(TOTP.totp(secret,"0000000000000001",6)).toBe("770144"),expect(TOTP.totp(secret,"0000000000000002",6)).toBe("432576"),expect(TOTP.totp(secret,"0000000000000003",6)).toBe("628905"),expect(TOTP.totp(secret,"0000000000000004",6)).toBe("667659"),expect(TOTP.totp(secret,"0000000000000005",6)).toBe("005853"),expect(TOTP.totp(secret,"0000000000000006",6)).toBe("357776"),expect(TOTP.totp(secret,"0000000000000007",6)).toBe("836761"),expect(TOTP.totp(secret,"0000000000000008",6)).toBe("008756"),expect(TOTP.totp(secret,"0000000000000009",6)).toBe("179216")}),it("should generate the correct otp for Gmail/Google secret",function(){return secret="7ysrsrmxbsdofeug5gsl3kr7twnmffca",secret=Encoder.base32tohex(secret).toUpperCase(),expect(TOTP.totp(secret,"0000000000000001",6)).toBe("057916"),expect(TOTP.totp(secret,"0000000000000002",6)).toBe("453717"),expect(TOTP.totp(secret,"0000000000000003",6)).toBe("510142"),expect(TOTP.totp(secret,"0000000000000004",6)).toBe("859962"),expect(TOTP.totp(secret,"0000000000000005",6)).toBe("336530"),expect(TOTP.totp(secret,"0000000000000006",6)).toBe("212326"),expect(TOTP.totp(secret,"0000000000000007",6)).toBe("360721"),expect(TOTP.totp(secret,"0000000000000008",6)).toBe("700178"),expect(TOTP.totp(secret,"0000000000000009",6)).toBe("340837")})})}),require(["helpers/json_storage","test/mock/mock_chrome_storage"],function(JsonStorage,MockChromeStorage){return describe("JsonStorage",function(){var filename,storage;return storage=JsonStorage,filename="filename.a.b.c",window.chrome={storage:{local:MockChromeStorage}},it("should save files in local storage",function(){var data,stored;return data={a:1,b:"foo"},storage.save(filename,data),stored=MockChromeStorage.hash[filename],expect(stored).toBeDefined(),expect(stored).not.toBeNull(),expect(stored).toEqual(data)}),it("should be able to load stored files",function(){var data;return data={a:234,b:"foo",d:{}},MockChromeStorage.hash[filename]=data,JsonStorage.loadObject(filename,function(saved){return expect(saved).toEqual(data)})})})}),require(["helpers/password_score"],function(PasswordScore){return describe("PasswordScore",function(){return it("should rate with 0 a null password",function(){return expect(PasswordScore.score(null)).toBe(0)}),it("should rate with 0 an empty password",function(){return expect(PasswordScore.score("")).toBe(0)}),it("should award every 3 repetitions with additional 1",function(){return expect(PasswordScore.score("aaaaaa")).toBe(4),expect(PasswordScore.score("aaaaaaaaaa")).toBe(5)}),it("should rate 1 everything with a password length less than or 5",function(){return expect(PasswordScore.score("S/(&%")).toBe(1),expect(PasswordScore.score("12345")).toBe(1),expect(PasswordScore.score("1234")).toBe(1),expect(PasswordScore.score("1aW4")).toBe(1)}),it("should award 2 for every unique letter",function(){return expect(PasswordScore.score("abcdef")).toBe(12),expect(PasswordScore.score("qpwoeirutyasldkfjghz")).toBe(40)}),it("            should give 15 points for using more than one of the following            [digits, lowercase, uppercase, non-letters-non-digits] ",function(){return expect(PasswordScore.score("aaa111")).toBe(21),expect(PasswordScore.score("AAA111")).toBe(21),expect(PasswordScore.score("AAAaaa")).toBe(21)}),it("            should give 15 points for each mixing of            [digits, lowercase, uppercase, non-letters-non-digits] ",function(){return expect(PasswordScore.score("aa11AA")).toBe(36),expect(PasswordScore.score("AAA111")).toBe(21),expect(PasswordScore.score("AAAaaa")).toBe(21)}),it("should rate with 'very weak' every score <= 20",function(){return expect(PasswordScore.getName(-100)).toBe(PasswordScore.VERY_WEAK.label),expect(PasswordScore.getName(0)).toBe(PasswordScore.VERY_WEAK.label),expect(PasswordScore.getName(10)).toBe(PasswordScore.VERY_WEAK.label),expect(PasswordScore.getName(15)).toBe(PasswordScore.VERY_WEAK.label),expect(PasswordScore.getName(20)).toBe(PasswordScore.VERY_WEAK.label)}),it("should rate with 'weak' every score in [21,30]",function(){return expect(PasswordScore.getName(21)).toBe(PasswordScore.WEAK.label),expect(PasswordScore.getName(25)).toBe(PasswordScore.WEAK.label),expect(PasswordScore.getName(30)).toBe(PasswordScore.WEAK.label)}),it("should rate with 'good' every score in [31,40]",function(){return expect(PasswordScore.getName(31)).toBe(PasswordScore.GOOD.label),expect(PasswordScore.getName(36)).toBe(PasswordScore.GOOD.label),expect(PasswordScore.getName(40)).toBe(PasswordScore.GOOD.label)}),it("should rate with 'strong' every score in [41,50]",function(){return expect(PasswordScore.getName(41)).toBe(PasswordScore.STRONG.label),expect(PasswordScore.getName(47)).toBe(PasswordScore.STRONG.label),expect(PasswordScore.getName(50)).toBe(PasswordScore.STRONG.label)}),it("should rate with 'very strong' every score in [61,...]",function(){return expect(PasswordScore.getName(61)).toBe(PasswordScore.VERY_STRONG.label),expect(PasswordScore.getName(1e3)).toBe(PasswordScore.VERY_STRONG.label),expect(PasswordScore.getName(1e4)).toBe(PasswordScore.VERY_STRONG.label)})})}),require(["models/sync/sync_helper"],function(SyncHelper){return describe("SyncHelper",function(){var getMockResponse,syncHelper;return getMockResponse=function(options){var mock;return mock={success:!0,needsHealthCheck:!1,movingFactor:0,syncGa:!1,authyToken:{},addDeviceRequest:!1,keyRotationNonce:null,syncPassword:!1},$.extend({},mock,options)},syncHelper=null,beforeEach(function(){return syncHelper=new SyncHelper}),describe("sync",function(){return it("should call SyncHelper#onRequestSuccessful when SyncApi.syncDeviceAuth is succesful",function(){var called;return syncHelper.syncApi.syncDeviceAuth=function(options,onSuccess){return null==options&&(options={}),onSuccess(getMockResponse())},called=!1,syncHelper.onRequestSuccessful=function(){return called=!0},syncHelper.sync(),expect(called).toBe(!0)}),it("should call SyncApi.syncDeviceNonAuth and SyncHelper#onRequestSuccessful when SyncApi.syncDeviceAuth is unsuccesful",function(){var calledNonAuth,calledSuccessful;return syncHelper.syncApi.syncDeviceAuth=function(options,onSuccess,onFail){return null==options&&(options={}),onFail({success:!1,message:"Error"})},calledNonAuth=!1,syncHelper.syncApi.syncDeviceNonAuth=function(options,onSuccess){return null==options&&(options={}),calledNonAuth=!0,onSuccess(getMockResponse())},calledSuccessful=!1,syncHelper.onRequestSuccessful=function(){return calledSuccessful=!0},syncHelper.sync(),expect(calledNonAuth).toBe(!0),expect(calledSuccessful).toBe(!0)}),it("should call SyncHelper#onRequestFailed when SyncApi.syncDeviceAuth and SyncApi.syncDeviceNonAuth are both unsuccesful",function(){var called;return syncHelper.syncApi.syncDeviceAuth=function(options,onSuccess,onFail){return null==options&&(options={}),onFail({success:!1,message:"Error"})},syncHelper.syncApi.syncDeviceNonAuth=function(options,onSuccess,onFail){return null==options&&(options={}),onFail({success:!1,message:"Error"})},called=!1,syncHelper.onRequestFailed=function(){return called=!0},syncHelper.sync(),expect(called).toBe(!0)})}),describe("onRequestSuccessful",function(){return it("should call SyncTimeSync#checkTimeSync",function(){var called;return called=!1,syncHelper.timeSync.checkTimeSync=function(){return called=!0},syncHelper.onRequestSuccessful(getMockResponse()),expect(called).toBe(!0)}),it("should call onNeedsHealthCheck when needsHealthCheck = true",function(){var called;return called=!1,syncHelper.onNeedsHealthCheck=function(){return called=!0},syncHelper.onRequestSuccessful(getMockResponse({needsHealthCheck:!0})),expect(called).toBe(!0)}),it("should call onSyncGATokens when syncGa = true",function(){var called;return called=!1,syncHelper.onSyncGATokens=function(){return called=!0},syncHelper.onRequestSuccessful(getMockResponse({syncGa:!0})),expect(called).toBe(!0)}),it("should call onAddDeviceRequestPresent when addDeviceRequest = true",function(){var called;return called=!1,syncHelper.onAddDeviceRequestPresent=function(){return called=!0},syncHelper.onRequestSuccessful(getMockResponse({addDeviceRequest:!0})),expect(called).toBe(!0)}),it("should call onPasswordOutdated when syncPassword = true",function(){var called;return called=!1,syncHelper.onPasswordOutdated=function(){return called=!0},syncHelper.onRequestSuccessful(getMockResponse({syncPassword:!0})),expect(called).toBe(!0)}),it("should call onRotateKey when keyRotationNonce != null",function(){var called;return called=!1,syncHelper.onRotateKey=function(){return called=!0},syncHelper.onRequestSuccessful(getMockResponse({keyRotationNonce:"11111"})),expect(called).toBe(!0)})})})}),require(["models/analytics/event","models/analytics/mixpanel_sender"],function(Event,MixPanelSender){return describe("Event",function(){return it("should throw error when getName is not implemented",function(){var e;return e=new Event,expect(function(){return e.getName()}).toThrow()}),it("should throw error when toJson is not implemented",function(){var e;return e=new Event,expect(function(){return e.toJson()}).toThrow()}),it("should send event to mixpanel when send is called",function(){var e;return spyOn(MixPanelSender.get(),"sendEvent"),e=new Event,e.getName=function(){return"a"},e.toJson=function(){return"b"},e.send(),expect(MixPanelSender.get().sendEvent).toHaveBeenCalledWith("a","b")})})}),require(["models/analytics/finish_registration_event"],function(FinishRegistrationEvent){return describe("FinishRegistrationEvent",function(){var e,now,selectAuthTypeDate,timeInMillis;return timeInMillis=1395438705590,selectAuthTypeDate=new Date(timeInMillis),now=new Date(timeInMillis+100),e=new FinishRegistrationEvent({selectAuthTypeDate:selectAuthTypeDate,now:now}),it("should have the correct name ",function(){return expect(e.getName()).toBe("finish_registration")}),it("should generate proper json",function(){return expect(e.toJson()).toEqual({time_since_auth_type:100})})})}),require(["models/analytics/initialize_registration_event","test/mock/mock_mixpanel"],function(InitializeRegistrationEvent,MockMixPanel){return describe("InitializeRegistrationEvent",function(){var e;return e=new InitializeRegistrationEvent({cellphone:"123",countryCode:"1",isNew:!0,deviceCount:5}),it("should generate proper json",function(){var json;return json=e.toJson(),expect(Object.keys(json).length).toBe(3),expect({cellphone:"123",country_code:"1",is_new:!0}).toEqual(e.toJson())}),it("should have the correct name",function(){return expect(e.getName()).toBe("init_registration")}),it("should set the correct people analytics properties",function(){var now;return MockMixPanel.mock(),spyOn(mixpanel.people,"set"),spyOn(mixpanel.people,"increment"),spyOn(mixpanel,"identify"),now=(new Date).getTime(),e.setUserProperties("5000",{last_register_date:now}),expect(mixpanel.people.set).toHaveBeenCalledWith({last_register_date:now,cellphone:"123",country_code:"1",num_devices:5}),expect(mixpanel.people.increment).toHaveBeenCalledWith("registration_count"),expect(mixpanel.identify).toHaveBeenCalledWith("5000")})})}),require(["models/analytics/mixpanel_sender","test/mock/mock_mixpanel"],function(MixPanelSender,MockMixPanel){return describe("MixPanelSender",function(){return it("should always return same sender instance",function(){var sender;return sender=MixPanelSender.get(),sender.field="field",sender=MixPanelSender.get(),expect(sender.field).toBeDefined(),expect(sender.field).toEqual("field")}),it("should send event to mixpanel when send is called",function(){var sender;return MockMixPanel.mock(),spyOn(mixpanel,"track"),sender=MixPanelSender.get(),sender.sendEvent("a","b"),expect(mixpanel.track).toHaveBeenCalledWith("a","b")})})}),require(["models/analytics/select_auth_type_event"],function(SelectAuthTypeEvent){return describe("SelectAuthTypeEvent",function(){var e;return e=new SelectAuthTypeEvent({provider:"foobar",authType:"push"}),it("should have the correct name",function(){return expect(e.getName()).toBe("select_auth_type")}),it("should not allow authType other than push, call or sms",function(){return expect(function(){return new SelectAuthTypeEvent({provider:"foobar",authType:"foo"})
}).toThrow(),expect(function(){return new SelectAuthTypeEvent({provider:"foobar",authType:"bar"})}).toThrow()}),it("should generate proper json",function(){return expect(e.toJson()).toEqual({provider:"foobar",auth_type:"push"})})})}),require(["models/apps/app_manager","test/mock/mock_chrome_storage","models/apps/google_auth_app","models/apps/authy_app"],function(AppManager,MockChromeStorage,GoogleAuthApp,AuthyApp){return describe("AppManager",function(){var appManager,apps,generateTokenData,getAuthenticatorApp,getAuthyApp;return appManager=null,getAuthenticatorApp=function(id,encrypted,isMarkedForDeletion){var data;return null==isMarkedForDeletion&&(isMarkedForDeletion=!1),data={getId:function(){return id},uniqueId:id,isEncrypted:function(){return encrypted},isAuthenticatorAccount:function(){return!0},isMarkedForDeletion:function(){return isMarkedForDeletion},getUploadState:function(){return GoogleAuthApp.UPLOADING},setUploadState:function(){},isUploaded:function(){return!1},toJson:function(){return{}}}},getAuthyApp=function(id){var data;return data={_id:id,getId:function(){return id},getServerId:function(){return id},isEncrypted:function(){return!1},isAuthenticatorAccount:function(){return!1},isMarkedForDeletion:function(){return!1},validateAndLock:function(){return!0},toJson:function(){return{}},update:function(){return!0}}},generateTokenData=function(params){var tokenData;return tokenData={_id:params.id,name:params.name,serial_id:35,authy_id:27389,assets_group:"cloudflare",background_color:"#FFFFFF"},params.secretSeed&&(tokenData.secret_seed=params.secretSeed),tokenData},apps=[getAuthenticatorApp("1",!0),getAuthenticatorApp("2",!1),getAuthenticatorApp("3",!1),getAuthenticatorApp("4",!1,!0),getAuthenticatorApp("5",!1,!1),getAuthenticatorApp("6",!0,!1),getAuthenticatorApp("7",!0,!0),getAuthyApp("8"),getAuthyApp("9"),getAuthyApp("10")],beforeEach(function(){return MockChromeStorage.mock(),spyOn(AuthyApp,"getLocalId").andCallFake(function(uniqueId){return uniqueId}),spyOn(GoogleAuthApp,"getLocalId").andCallFake(function(uniqueId){return uniqueId}),appManager=AppManager.create(),appManager.save=function(){},appManager.clear(),appManager.addAll(apps)}),describe("constructor",function(){return it("should have a reference to appsApi",function(){return expect(appManager).toBeDefined(),expect(appManager).not.toBeNull()})}),describe("filter",function(){return it("should return only the authenticator apps when calling getAuthenticatorApps",function(){return expect(appManager.getAuthenticatorApps().length).toEqual(7)}),it("should return only the authy apps when calling getAuthyApps",function(){return expect(appManager.getAuthyApps().length).toEqual(3)}),it("should return only the encrypted apps when calling getEncryptedApps",function(){return expect(appManager.getEncryptedApps().length).toEqual(3)}),it("should return only the decrypted apps when calling getDecryptedApps",function(){return expect(appManager.getDecryptedApps().length).toEqual(7)}),it("should return only the ids of the authy apps when calling getAuthyAppIds",function(){return expect(appManager.getAuthyAppIds()).toEqual(["8","9","10"])}),it("should return only the ids of the authenticator apps when calling getAuthenticatorAppIds",function(){return expect(appManager.getAuthenticatorAppIds()).toEqual(["1","2","3","4","5","6","7"])}),it("should return the apps that are marked for deletion when calling getMarkedForDeletionApps",function(){return expect(appManager.getMarkedForDeletionApps().length).toEqual(2)})}),describe("indexOf",function(){return it("should return the index of an app if found",function(){return expect(appManager.indexOf("1")).toEqual(0),expect(appManager.indexOf("5")).toEqual(4),expect(appManager.indexOf("10")).toEqual(9)}),it("should return -1 if the app is not found",function(){return expect(appManager.indexOf(1)).toEqual(-1),expect(appManager.indexOf(5)).toEqual(-1),expect(appManager.indexOf("A0")).toEqual(-1)})}),describe("contains",function(){return it("should return true if the app is contained",function(){return expect(appManager.contains("1")).toEqual(!0),expect(appManager.contains("5")).toEqual(!0),expect(appManager.contains("10")).toEqual(!0)}),it("should return false if the app is not contained",function(){return expect(appManager.contains(1)).toEqual(!1),expect(appManager.contains(5)).toEqual(!1),expect(appManager.contains("A")).toEqual(!1)})}),describe("remove",function(){return it("should remove the app if the id is present",function(){return expect(appManager.remove("1")).toEqual(!0),expect(appManager.find("1")).toEqual(null),expect(appManager.contains("1")).toEqual(!1)}),it("should return false if the id is not found",function(){return expect(appManager.remove("A")).toEqual(!1)}),it("should remove all apps with given ids when calling removeAll",function(){return appManager.removeAll(["1","3","10"]),expect(appManager.contains("1")).toEqual(!1),expect(appManager.contains("3")).toEqual(!1),expect(appManager.contains("10")).toEqual(!1)})}),describe("find",function(){return it("should return the app with the given id when calling find",function(){return expect(appManager.find("9")).toEqual(apps[8])}),it("should return null when the id is not found ",function(){return expect(appManager.find("A")).toEqual(null)})}),describe("sync",function(){return describe("syncAuthyApps",function(){return it("it should remove all Authy apps with the ids returned by server",function(){var callbackCalled;return appManager.appsApi.syncAuthyApps=function(authyAppIds,onSuccess){return onSuccess([],["8","10"])},callbackCalled=!1,appManager.syncAuthyApps({onSuccess:function(){return callbackCalled=!0}}),expect(callbackCalled).toEqual(!0),expect(appManager.contains("8")).toBe(!1),expect(appManager.contains("10")).toBe(!1),expect(appManager.contains("9")).toBe(!0)}),it("it should add all Authy apps returned by server",function(){var app,callbackCalled;return app=getAuthyApp("15"),app.validateAndLock=function(){return!0},AuthyApp.create=function(){return app},appManager.appsApi.syncAuthyApps=function(authyAppIds,onSuccess){var tokensData;return tokensData=[generateTokenData({id:"9",name:"App #9"}),generateTokenData({id:"15",name:"App #15",secretSeed:"a710c81afa285d326ae72e5ab2c60bd6"})],onSuccess(tokensData,[])},callbackCalled=!1,appManager.syncAuthyApps({onSuccess:function(){return callbackCalled=!0}}),expect(callbackCalled).toEqual(!0),expect(appManager.contains("8")).toBe(!0),expect(appManager.contains("10")).toBe(!0),expect(appManager.contains("9")).toBe(!0),expect(appManager.contains("15")).toBe(!0)}),it("should do nothing if the request fails",function(){var authyApps,callbackCalled;return authyApps=appManager.getAuthyApps(),appManager.appsApi.syncAuthyApps=function(authyAppIds,onSuccess,onFail){return onFail({})},callbackCalled=!1,appManager.syncAuthyApps({onFail:function(){return callbackCalled=!0}}),expect(callbackCalled).toEqual(!0),expect(appManager.getAuthyApps()).toEqual(authyApps)})}),describe("syncAuthenticatorApps",function(){return it("it should remove all authenticator apps with the ids returned by server",function(){var callbackCalled;return appManager.find("1").isUploaded=function(){return!0},appManager.find("2").isUploaded=function(){return!0},appManager.appsApi.syncAuthenticatorApps=function(authenticatorAppIds,onSuccess){return onSuccess([],["1","2"])},callbackCalled=!1,appManager.syncAuthenticatorApps({onSuccess:function(){return callbackCalled=!0}}),expect(callbackCalled).toEqual(!0),expect(appManager.contains("1")).toBe(!1),expect(appManager.contains("2")).toBe(!1),expect(appManager.contains("3")).toBe(!0)}),it("it should add all authenticator apps returned by server",function(){var callbackCalled;return appManager.appsApi.syncAuthenticatorApps=function(authenticatorAppIds,onSuccess){return onSuccess([getAuthenticatorApp("15",!0),getAuthenticatorApp("16",!0)],[])},callbackCalled=!1,appManager.syncAuthenticatorApps({onSuccess:function(){return callbackCalled=!0}}),expect(callbackCalled).toEqual(!0),expect(appManager.contains("1")).toBe(!0),expect(appManager.contains("2")).toBe(!0),expect(appManager.contains("3")).toBe(!0),expect(appManager.contains("15")).toBe(!0),expect(appManager.contains("16")).toBe(!0)}),it("should do nothing if the request fails",function(){var authenticatorApps,callbackCalled;return authenticatorApps=appManager.getAuthenticatorApps(),appManager.appsApi.syncAuthenticatorApps=function(authenticatorAppIds,onSuccess,onFail){return onFail({})},callbackCalled=!1,appManager.syncAuthenticatorApps({onFail:function(){return callbackCalled=!0}}),expect(callbackCalled).toEqual(!0),expect(appManager.getAuthenticatorApps()).toEqual(authenticatorApps)})})}),describe("deleteApp",function(){return it("should delete the app if server response is successfull",function(){var callbackCalled;return appManager.appsApi.deleteAuthenticatorApp=function(appId,onSuccess){return onSuccess()},callbackCalled=!1,appManager.deleteApp(getAuthenticatorApp("1"),function(){return callbackCalled=!0}),expect(callbackCalled).toEqual(!0),expect(appManager.contains("1")).toEqual(!1)}),it("should not delete the app if server response is not successfull",function(){var callbackCalled;return appManager.appsApi.deleteAuthenticatorApp=function(appId,onSuccess,onFail){return onFail({message:"test"})},callbackCalled=!1,appManager.deleteApp(getAuthenticatorApp("1"),void 0,function(){return callbackCalled=!0}),expect(callbackCalled).toEqual(!0),expect(appManager.contains("1")).toEqual(!0)})}),xdescribe("storage",function(){return it("should be able to convert from and to json",function(){var authenticatorApp,authyApp,json;return json={account_type:"gmail",encrypted_seed:"xjlEUh0TYGI3RpMATi/nlapx9Jw3V3FeWIrRES suv8=",name:"Linode",original_name:"LinodeManage,senekis",password_timestamp:1384816655,salt:"izhrzUjGrrTMfsM618n4XbXh86XLOnWx",unique_id:"1384816181"},authenticatorApp=GoogleAuthApp.create(json),json={_id:"50ababa03eafeadb58000001",assets_group:"50ababa03eafeadb58000001",background_color:"#FFFFFF",circle_background:null,circle_color:null,labels_color:null,labels_shadow_color:null,name:"Daniel Staging",serial_id:2,timer_color:"#3c3c3c",token_color:null,version:1,authy_id:5906,secret_seed:"595e72d5dd0d2ad1dab730f506a55e6d"},authyApp=AuthyApp.create(json),appManager.addAll([authenticatorApp,authyApp]),json=appManager.toJson(),expect(json.authyApps.length).toEqual(1),expect(json.authenticatorApps.length).toEqual(1),appManager.clear(),appManager.loadLocal(function(){}),expect(appManager.getAuthyApps().length).toEqual(1),expect(appManager.getAuthenticatorApps().length).toEqual(1)})}),xdescribe("upload authenticator apps",function(){return it("should change the upload state to updating when calling uploadAuthenticatorApp",function(){return appManager.appsApi.uploadAuthenticatorApp=function(){},appManager.uploadAuthenticatorApp("1"),expect(appManager.find("1").getUploadState()).toEqual("uploading")}),it("should leave the upload state as uptaing when uploadAuthenticatorApp fails",function(){return appManager.appsApi.uploadAuthenticatorApp=function(){}}),it("should leave the upload state as updated when uploadAuthenticatorApp succeeds",function(){return appManager.appsApi.uploadAuthenticatorApp=function(){}})})})}),require(["models/apps/app_manager","models/apps/google_auth_app","models/apps/backups_password_model","test/mock/apis/mock_apps_api"],function(AppManager,GoogleAuthApp,BackupsPasswordModel,MockAppsApi){return describe("AppManager",function(){var getNewAuthenticatorApp,getNewAuthyApp;return getNewAuthenticatorApp=function(options){var hash;return hash={account_type:"google",encrypted_seed:"AAAA",original_name:"name"+Math.random(),password_timestamp:"123456",salt:Math.random()+"",unique_id:options.id},GoogleAuthApp.create(hash)},getNewAuthyApp=function(){var hash;return hash=AuthyApp.create(hash)},beforeEach(function(){return this.appManager=AppManager.create(),this.api=new MockAppsApi,this.appManager.appsApi=this.api,this.callbacks={onSuccess:function(){},onFail:function(){},onDecryptSuccess:function(){}},spyOn(this.callbacks,"onSuccess"),spyOn(this.callbacks,"onFail"),spyOn(this.callbacks,"onDecryptSuccess"),this.app1=getNewAuthenticatorApp({id:1}),this.app2=getNewAuthenticatorApp({id:2}),this.app3=getNewAuthenticatorApp({id:3}),this.app4=getNewAuthenticatorApp({id:4}),this.appManager.addAll([this.app1,this.app2,this.app3,this.app4])}),it("should have defined deps",function(){return expect(AppManager).toBeDefined(),expect(MockAppsApi).toBeDefined(),expect(this.appManager).toBeDefined(),expect(this.api).toBeDefined(),expect(this.appManager.size()).toBe(4)}),describe("sync authenticator apps",function(){return it("should call onFail when the API fails",function(){return this.api.shouldFail({message:"we screwed up, sorry"}),this.appManager.syncAuthenticatorApps({onSuccess:this.callbacks.onSuccess,onFail:this.callbacks.onFail}),expect(this.callbacks.onFail).toHaveBeenCalledWith({message:"we screwed up, sorry"})}),it("should call onSuccess when sync returns no changes",function(){return this.api.shouldSucceed([],[]),this.appManager.syncAuthenticatorApps({onSuccess:this.callbacks.onSuccess,onFail:this.callbacks.onFail}),expect(this.callbacks.onSuccess).toHaveBeenCalledWith()}),it("should call onDecryptSuccess when api succeeds and backups password is set",function(){return spyOn(BackupsPasswordModel,"whenPasswordLoaded").andCallFake(function(cb){return cb("password")}),spyOn(this.appManager,"decryptAllApps").andCallFake(function(password,cb){return cb()}),spyOn(this.appManager,"saveAndNotifyListeners"),this.api.shouldSucceed([],[]),this.appManager.syncAuthenticatorApps({onSuccess:this.callbacks.onSuccess,onFail:this.callbacks.onFail,onDecryptSuccess:this.callbacks.onDecryptSuccess}),expect(this.appManager.decryptAllApps).toHaveBeenCalled(),expect(this.callbacks.onDecryptSuccess).toHaveBeenCalledWith()}),describe("apps to delete",function(){return it("should delete apps returned by the sync's apps to delete (but only if they are backed up)",function(){var numApps;return numApps=this.appManager.size(),this.app1.setUploadState(GoogleAuthApp.UPLOADED),this.app2.setUploadState(GoogleAuthApp.UPLOADED),this.api.shouldSucceed([],[this.app1.uniqueId,this.app2.uniqueId]),this.appManager.syncAuthenticatorApps({onSuccess:this.callbacks.onSuccess,onFail:this.callbacks.onFail}),expect(this.appManager.size()).toBe(numApps-2)}),it("should NOT delete apps returned by the sync's apps to delete if they are not backed up",function(){var numApps;return numApps=this.appManager.size(),this.api.shouldSucceed([],[this.app1.uniqueId,this.app2.uniqueId]),this.appManager.syncAuthenticatorApps({onSuccess:this.callbacks.onSuccess,onFail:this.callbacks.onFail}),expect(this.appManager.size()).toBe(numApps)})}),describe("apps to add",function(){return it("should add apps returned by the sync",function(){var appsToAdd,numApps;return numApps=this.appManager.size(),appsToAdd=[getNewAuthenticatorApp({id:10}),getNewAuthenticatorApp({id:11})],this.api.shouldSucceed(appsToAdd,[]),this.appManager.syncAuthenticatorApps({onSuccess:this.callbacks.onSuccess,onFail:this.callbacks.onFail}),expect(this.appManager.size()).toBe(numApps+2)}),it("should not add apps that are already present",function(){var appsToAdd,numApps;return numApps=this.appManager.size(),appsToAdd=[getNewAuthenticatorApp({id:1}),getNewAuthenticatorApp({id:2}),getNewAuthenticatorApp({id:3}),getNewAuthenticatorApp({id:12})],this.api.shouldSucceed(appsToAdd,[]),this.appManager.syncAuthenticatorApps({onSuccess:this.callbacks.onSuccess,onFail:this.callbacks.onFail}),expect(this.appManager.size()).toBe(numApps+1)})})}),describe("sync Authy apps",function(){return describe("apps to delete",function(){return it("should delete apps returned by api",function(){})})}),describe("getAppsToRemoveFromSync",function(){return it("should returned only backed up apps",function(){var ids;return this.app3.setUploadState(GoogleAuthApp.UPLOADED),this.app1.setUploadState(GoogleAuthApp.UPLOADED),ids=this.appManager.getAppsToRemoveFromSync([1,2,3,4]),expect(ids).toEqual([this.app1.getId(),this.app3.getId()])}),it("should return only apps that where found",function(){var ids;return ids=this.appManager.getAppsToRemoveFromSync(["this id is not present","neither is his one"]),expect(ids).toEqual([])}),it("should return an empty list if an empty list is passed ",function(){var ids;return ids=this.appManager.getAppsToRemoveFromSync([]),expect(ids).toEqual([])}),it("should not return ids of GoogleAuthApp.NOT_UPLOADED apps",function(){var ids;return this.app1.setUploadState(GoogleAuthApp.NOT_UPLOADED),ids=this.appManager.getAppsToRemoveFromSync([this.app1.uniqueId]),expect(ids).toEqual([])}),it("should not return ids of GoogleAuthApp.UPLOADING apps",function(){var ids;return this.app1.setUploadState(GoogleAuthApp.UPLOADING),ids=this.appManager.getAppsToRemoveFromSync([this.app1.uniqueId]),expect(ids).toEqual([])})})})}),require(["models/apps/authy_app","test/mock/apis/mock_registration_api","helpers/log"],function(AuthyApp,MockRegistrationApi,Log){return describe("AuthyApp",function(){var appData,authyApp;return authyApp=null,appData={_id:"123456",name:"test app",serial_id:"78",version:"3",authy_id:"3",secret_seed:"32168296aeacf8b44abd067ad781b8ea",assets_group:"coinbase",background_color:"#3c3c3c",circle_background:"#f9f9f9",circle_color:"#c5c4c4",labels_color:"#B2B2B2",labels_shadow_color:"#FFFFFF",timer_color:"#c5c4c4"},it("should be defined",function(){var app;return app=new AuthyApp,expect(app.regApi).toBeDefined(),expect(app.lastCheck).toBe(null)}),it("Should return the local ID",function(){return expect(AuthyApp.getLocalId("five")).toBe("AuthyApp-five")}),it("Should create an Authy app",function(){return authyApp=AuthyApp.create(appData),expect(authyApp).not.toBe(null),expect(authyApp._id).toEqual(appData._id),expect(authyApp.name).toEqual(appData.name),expect(authyApp.serialId).toEqual(appData.serial_id),expect(authyApp.authyId).toEqual(appData.authy_id),expect(authyApp.secretSeed).toEqual(appData.secret_seed),expect(authyApp.assetsGroup).toEqual(appData.assets_group),expect(authyApp.backgroundColor).toEqual(appData.background_color),expect(authyApp.timerColor).toEqual(appData.timer_color),expect(authyApp.circleColor).toEqual(appData.circle_color),expect(authyApp.circleBackground).toEqual(appData.circle_background),expect(authyApp.labelsColor).toEqual(appData.labels_color),expect(authyApp.labelsShadowColor).toEqual(appData.labels_shadow_color)}),describe("Instance methods",function(){return beforeEach(function(){return authyApp=AuthyApp.create(appData)}),it("Should update the authy app",function(){var updateData;return updateData={version:4,name:"Testing",assets_group:"heroku"},authyApp.update(updateData),expect(authyApp.name).toEqual("Testing"),expect(authyApp.version).toEqual(4),expect(authyApp.assetsGroup).toEqual("heroku")}),it("Should set the last check date",function(){var newDate;return newDate=new Date,authyApp.setLastCheckDate(newDate),expect(authyApp.lastCheck).toEqual(newDate)}),describe("isValid method",function(){return it("The app is valid if have a serialId",function(){return expect(authyApp.isValid()).toBe(!0)}),it("The app is invalid if don't have a serialId",function(){var app;return app=AuthyApp.create({secret_seed:"123456"}),expect(app.isValid()).toBe(!1)}),it("The app is invalid if don't have a secretSeed",function(){var app;return app=AuthyApp.create({serial_id:"123456"}),expect(app.isValid()).toBe(!1)})}),describe("validateAndLock method",function(){return it("Should check the secret seed",function(){return authyApp.regApi=new MockRegistrationApi,spyOn(authyApp.regApi,"checkSecretSeed"),authyApp.validateAndLock(),expect(authyApp.regApi.checkSecretSeed).toHaveBeenCalledWith("2345","3","1032498d7a92a160061a55bf5b3e80bbc741144f34dfaf4d0cc904f659627ca9",jasmine.any(Function),jasmine.any(Function))}),it("Should set the last check date",function(){var api;return api=new MockRegistrationApi,api.shouldSucceed({message:"The message"}),authyApp.regApi=api,spyOn(authyApp,"setLastCheckDate"),spyOn(Log,"d"),authyApp.validateAndLock(),expect(authyApp.setLastCheckDate).toHaveBeenCalled(),expect(Log.d).toHaveBeenCalledWith("Secret seed verified for test app: The message")}),it("Should log the error",function(){var api;return api=new MockRegistrationApi,api.shouldFail({message:"The message"}),authyApp.regApi=api,spyOn(Log,"e"),authyApp.validateAndLock(),expect(Log.e).toHaveBeenCalledWith("Secret seed verification failed for test app: The message")})}),describe("needsHealthCheck method",function(){return it("Return true if lastCheck is null",function(){return expect(authyApp.lastCheck).toBe(null),expect(authyApp.needsHealthCheck()).toBe(!0)}),it("Return true if lastCheck was 30 days ago",function(){var date;return date=new Date,date.setDate(date.getDate()-32),spyOn(Log,"d"),authyApp.setLastCheckDate(date),expect(authyApp.needsHealthCheck()).toBe(!0),expect(Log.d).toHaveBeenCalledWith("Performing health check. Days since the last check: 32")}),it("Return false if lastCheck was less than 30 days",function(){var date;return date=new Date,date.setDate(date.getDate()-2),spyOn(Log,"d"),authyApp.setLastCheckDate(date),expect(authyApp.needsHealthCheck()).toBe(!1),expect(Log.d).toHaveBeenCalledWith("Skipping health check. Days since the last check: 2")})}),it("should return the app name",function(){return expect(authyApp.getName()).toEqual(appData.name)}),it("should return an OTP",function(){return expect(authyApp.getOtp().length).toBe(7)}),it("should return the serverId",function(){return expect(authyApp.getServerId()).toEqual(appData._id)}),it("should return true, the authy app is decrypted",function(){return expect(authyApp.isDecrypted()).toBe(!0)}),it("should return false, the app isn't marked for deletion",function(){return expect(authyApp.isMarkedForDeletion()).toBe(!1)}),it("should return the json info",function(){var jsonInfo;return jsonInfo=authyApp.toJson(),expect(jsonInfo.type).toEqual("AuthyApp"),expect(jsonInfo._id).toEqual(appData._id),expect(jsonInfo.serialId).toEqual(appData.serial_id),expect(jsonInfo.authyId).toEqual(appData.authy_id),expect(jsonInfo.secretSeed).toEqual(appData.secret_seed),expect(jsonInfo.version).toEqual(appData.version)}),it("should retrun the app name humanized",function(){return expect(authyApp.getAccountName()).toEqual("Test App")}),it("should get the ID with preffix",function(){return expect(authyApp.getId()).toEqual("AuthyApp-123456")})})})}),require(["models/apps/authy_rsa_key","models/storage/encrypted_storage","test/mock/mock_encrypted_storage","models/api/rsa_api","test/mock/apis/mock_rsa_api"],function(AuthyRSAKey,EncryptedStorage,MockEncryptedStorage,RSAApi,MockRSAApi){return describe("AuthyRSAKey",function(){return it("should have defined dependencies",function(){return[AuthyRSAKey,EncryptedStorage,MockEncryptedStorage,RSAApi,MockRSAApi].forEach(function(i){return expect(i).toBeDefined()})}),describe("getPrivateKey",function(){return beforeEach(function(){return AuthyRSAKey.setStorage(MockEncryptedStorage)}),it("should set AuthyRSAKey.STORAGE_KEY static var",function(){return MockEncryptedStorage.save(AuthyRSAKey.STORAGE_KEY,"foobar",function(){}),AuthyRSAKey.getPrivateKey(function(){}),expect(AuthyRSAKey.PRIVATE_KEY).toBe("foobar")}),it("should have the AuthyRSAKey.PRIVATE_KEY as null by default",function(){return expect(AuthyRSAKey.PRIVATE_KEY).toBe(null)})}),describe("isConfigured",function(){return beforeEach(function(){return AuthyRSAKey.setStorage(MockEncryptedStorage)}),it("should return false when the key has not been stored",function(){var callback,key,_i,_len,_ref,_results;for(_ref=[null,void 0],_results=[],_i=0,_len=_ref.length;_len>_i;_i++)key=_ref[_i],MockEncryptedStorage.save(AuthyRSAKey.STORAGE_KEY,key,function(){}),callback={cb:function(){}},spyOn(callback,"cb"),AuthyRSAKey.isConfigured(callback.cb),_results.push(expect(callback.cb).toHaveBeenCalledWith(!1));return _results}),it("should return true when the key has been stored",function(){var callback;return MockEncryptedStorage.save(AuthyRSAKey.STORAGE_KEY,"foo key",function(){}),callback={cb:function(){}},spyOn(callback,"cb"),AuthyRSAKey.isConfigured(callback.cb),expect(callback.cb).toHaveBeenCalledWith(!0)})}),describe("checkAndStorePrivateKey",function(){return beforeEach(function(){return AuthyRSAKey.setApi(MockRSAApi),AuthyRSAKey.setStorage(MockEncryptedStorage)}),it("should store the key if the API is successful",function(){var callback;return MockRSAApi.pushResponse({success:!0,data:{success:!0}}),AuthyRSAKey.checkAndStorePrivateKey({privateKey:"foo123"}),expect(AuthyRSAKey.PRIVATE_KEY).toBe("foo123"),callback={cb:function(){}},spyOn(callback,"cb"),AuthyRSAKey.getPrivateKey(callback.cb),expect(callback.cb).toHaveBeenCalledWith("foo123")}),it("should call the onSuccess callback if the API is successful",function(){var callback;return MockRSAApi.pushResponse({success:!0,data:{success:!0}}),callback={cb:function(){}},spyOn(callback,"cb"),AuthyRSAKey.checkAndStorePrivateKey({privateKey:"bar123",onSuccess:callback.cb}),expect(callback.cb).toHaveBeenCalled()}),it("should call the onFail callback if the API fails",function(){var callback;return MockRSAApi.pushResponse({success:!1,data:{success:!1}}),callback={cb:function(){}},spyOn(callback,"cb"),AuthyRSAKey.checkAndStorePrivateKey({privateKey:"bar123",onFail:callback.cb}),expect(callback.cb).toHaveBeenCalled()})}),describe("downloadPrivateKey",function(){return beforeEach(function(){return AuthyRSAKey.setApi(MockRSAApi),AuthyRSAKey.setStorage(MockEncryptedStorage)}),it("should save the key if the api responds successfully to both the download and the check",function(){var callback;return MockRSAApi.pushResponse({success:!0,data:"foobarkey"}),MockRSAApi.pushResponse({success:!0,data:{success:!0}}),AuthyRSAKey.downloadPrivateKey(),callback={cb:function(){}},spyOn(callback,"cb"),AuthyRSAKey.isConfigured(callback.cb),expect(callback.cb).toHaveBeenCalledWith(!0)})}),describe("Storage",function(){return it("should be EncryptedStorage by default",function(){return expect(AuthyRSAKey.getStorage()).toBe(EncryptedStorage)}),it('should be "modifiable", to allow testing with other storage options',function(){return AuthyRSAKey.setStorage(MockEncryptedStorage),expect(AuthyRSAKey.getStorage()).toBe(MockEncryptedStorage)})}),describe("Api",function(){return it("should be RSAApi by default",function(){return expect(AuthyRSAKey.getApi()).toBe(RSAApi)}),it('should be "modifiable", to allow testing with a mock api',function(){return AuthyRSAKey.setApi(MockRSAApi),expect(AuthyRSAKey.getApi()).toBe(MockRSAApi)})}),afterEach(function(){return AuthyRSAKey.PRIVATE_KEY=null,AuthyRSAKey.setStorage(EncryptedStorage),AuthyRSAKey.setApi(RSAApi),MockRSAApi.clear(),MockEncryptedStorage.clear()})})}),require(["models/apps/backups_password_model","test/mock/mock_encrypted_storage"],function(BackupsPasswordModel,MockEncryptedStorage){return describe("BackupsPasswordModel",function(){var model;return model=null,beforeEach(function(){return MockEncryptedStorage.mock(),model=BackupsPasswordModel.createNew(),model.setPassword("000000")}),afterEach(function(){return MockEncryptedStorage.unmock()}),it("should have defined dependencies",function(){return[BackupsPasswordModel,MockEncryptedStorage].forEach(function(i){return expect(i).toBeDefined()})}),describe("setPassword",function(){return it("should set the password correctly",function(){var cb;return cb=jasmine.createSpy("cb"),model.setPassword("hipsterpwd",cb),expect(model.model.password).toEqual("hipsterpwd"),expect(model.model.enabled).toBe(!0),expect(cb).toHaveBeenCalled()})}),describe("setEnabled",function(){return it("should set enabled flag to true correctly",function(){var cb;return cb=jasmine.createSpy("cb"),spyOn(model,"notifyListeners"),model.setEnabled(!0,cb),expect(model.model.enabled).toBe(!0),expect(cb).toHaveBeenCalled(),expect(model.notifyListeners).toHaveBeenCalledWith({enabled:!0})}),it("should set enabled flag to false correctly",function(){var cb;return cb=jasmine.createSpy("cb"),spyOn(model,"notifyListeners"),model.setEnabled(!1,cb),expect(model.model.password).toBe(null),expect(model.model.enabled).toBe(!1),expect(cb).toHaveBeenCalled(),expect(model.notifyListeners).toHaveBeenCalledWith({enabled:!1})})}),describe("isLoadedToMemory",function(){return it("should return true if the model is not null",function(){return model.loadedToMemory=!1,expect(model.isLoadedToMemory()).toBe(!0)}),it("should return true if property loadedToMemory is true",function(){return model.loadedToMemory=!0,model.model=null,expect(model.isLoadedToMemory()).toBe(!0)}),it("should return false if property loadedToMemory is false and model is null",function(){return model.loadedToMemory=!1,model.model=null,expect(model.isLoadedToMemory()).toBe(!1)})}),describe("isPasswordSet",function(){return it("should return true if password is set",function(){return expect(model.isPasswordSet()).toBe(!0)}),it("should return false if password is not set",function(){return model.model.password=null,expect(model.isPasswordSet()).toBe(!1)})}),describe("cleanUpBeforeClose",function(){return it("should save and set properties correctly",function(){var cb;return cb=jasmine.createSpy("cb"),model.cleanUpBeforeClose(cb),expect(model.model).toBe(null),expect(model.loadedToMemory).toBe(!1),expect(cb).toHaveBeenCalled()})}),describe("areBackupsEnabled",function(){return it("should correctly return enabled value if model is loaded to memory",function(){var cb;return model.model.enabled=!1,cb=jasmine.createSpy("cb"),spyOn(model,"isLoadedToMemory").andReturn(!0),BackupsPasswordModel.areBackupsEnabled(cb),expect(cb).toHaveBeenCalledWith(!1)}),it("should return false if not loaded to memory",function(){var cb;return cb=jasmine.createSpy("cb"),spyOn(model,"isLoadedToMemory").andReturn(!1),BackupsPasswordModel.areBackupsEnabled(cb),expect(cb).toHaveBeenCalledWith(!1)})}),describe("setPassword",function(){return it("should set the password correctly if is loaded into memory",function(){var cb;return cb=jasmine.createSpy("cb"),spyOn(model,"isLoadedToMemory").andReturn(!0),BackupsPasswordModel.setPassword("mynastypwd",cb),expect(model.model.password).toEqual("mynastypwd"),expect(cb).toHaveBeenCalled()}),it("should set the password correctly if is not loaded into memory",function(){var cb;return cb=jasmine.createSpy("cb"),spyOn(model,"isLoadedToMemory").andReturn(!1),BackupsPasswordModel.setPassword("mynastypwd",cb),expect(model.model.password).toEqual("mynastypwd"),expect(cb).toHaveBeenCalled()})}),describe("setEnabled",function(){return it("should set enabled correctly if isLoadedToMemory and password is set",function(){var cb;return cb=jasmine.createSpy("cb"),BackupsPasswordModel.setEnabled(!1,cb),expect(model.model.enabled).toBe(!1),expect(cb).toHaveBeenCalled()}),it("should not set enabled correctly if password has never been set",function(){var cb;return cb=jasmine.createSpy("cb"),BackupsPasswordModel.get().cleanUpBeforeClose(function(){}),MockEncryptedStorage.clear(),expect(BackupsPasswordModel.setEnabled).toThrow(),expect(cb).not.toHaveBeenCalled()})}),describe("changePassword",function(){return it("should change the password correctly",function(){var appManager,cb;return appManager=BackupsPasswordModel.getAppManager(),spyOn(appManager,"removeAllEncryptedApps"),spyOn(appManager,"syncAuthenticatorApps").andCallFake(function(ops){return ops.onDecryptSuccess()}),spyOn(appManager,"updateAuthenticatorAppsPasswordTimestamp"),spyOn(appManager,"updateEncryptedSeeds"),spyOn(appManager,"uploadAuthenticatorApps"),spyOn(appManager,"save"),cb=jasmine.createSpy("cb"),BackupsPasswordModel.changePassword("hipster",{timestamp:1234567,cb:cb}),expect(appManager.removeAllEncryptedApps).toHaveBeenCalled(),expect(appManager.syncAuthenticatorApps).toHaveBeenCalled(),expect(appManager.updateAuthenticatorAppsPasswordTimestamp).toHaveBeenCalledWith(1234567),expect(appManager.updateEncryptedSeeds).toHaveBeenCalled(),expect(appManager.uploadAuthenticatorApps).toHaveBeenCalled(),expect(appManager.save).toHaveBeenCalled(),expect(cb).toHaveBeenCalled()
})})})}),require(["models/apps/google_auth_app"],function(GoogleAuthApp){return describe("GoogleAuthApp",function(){return it("shold be convertable from and to json",function(){var app,serverJson;return serverJson={account_type:"gmail",encrypted_seed:"xjlEUh0TYGI3RpMATi/nlapx9Jw3V3FeWIrRES suv8=",name:"Linode",original_name:"LinodeManager:senekis",password_timestamp:1384816655,salt:"izhrzUjGrrTMfsM618n4XbXh86XLOnWx",unique_id:"1384816181"},app=GoogleAuthApp.create(serverJson),expect(app.isEncrypted()).toEqual(!0)}),describe("setUploadState",function(){var authApp;return authApp=new GoogleAuthApp("gmail","1234","app name","originalName",12323453,"123qwe","123qwe","not_uploaded"),it("should allow state of uploading",function(){return authApp.setUploadState(GoogleAuthApp.UPLOADING),expect(authApp.getUploadState()).toEqual(GoogleAuthApp.UPLOADING)}),it("should allow state of uploaded",function(){return authApp.setUploadState(GoogleAuthApp.UPLOADING),expect(authApp.getUploadState()).toEqual(GoogleAuthApp.UPLOADING)}),it("should allow state of not_uploaded",function(){return authApp.setUploadState(GoogleAuthApp.UPLOADING),expect(authApp.getUploadState()).toEqual(GoogleAuthApp.UPLOADING)}),it("should now allow other states",function(){var error;error=!1;try{expect(authApp.setUploadState("hipsters"))}catch(_error){error=_error,error=!0}return expect(error).toEqual(!0)})})})}),require(["models/apps/master_token","models/storage/encrypted_storage","helpers/log"],function(MasterToken,EncryptedStorage,Log){return describe("MasterToken",function(){var deviceId,masterToken,secretKey,userId;return userId="1234",deviceId="2345",secretKey="684adbda1c6899401099069ef033ef4f",masterToken=null,describe("initialize",function(){return it("should create a instance of MasterTokenSingleton",function(){var token;return MasterToken.initialize("4568",deviceId,secretKey),token=MasterToken.get(),expect(token.userId).toEqual("4568"),expect(token.deviceId).toEqual(deviceId),expect(token.secretKey).toEqual(secretKey),expect(token.otpGenerator).toBeDefined()})}),describe("class methods",function(){return beforeEach(function(){return MasterToken.initialize(userId,deviceId,secretKey),masterToken=MasterToken.get()}),describe("save method",function(){return it("should save the EncryptedStorage",function(){return spyOn(EncryptedStorage,"save"),MasterToken.save(function(){}),expect(EncryptedStorage.save).toHaveBeenCalled()}),it("should execute the callback",function(){var callback;return callback={foo:function(){}},spyOn(callback,"foo"),spyOn(Log,"w"),masterToken.deviceId=null,MasterToken.save(callback.foo),expect(callback.foo).toHaveBeenCalled(),expect(Log.w).toHaveBeenCalledWith("Skipping save for MasterTokenSingleton since it hasn't been loaded into memory.")})}),describe("load method",function(){return it("if master token isn't found on storage call to callback",function(){var callback;return callback={foo:function(){}},spyOn(callback,"foo"),spyOn(MasterToken,"initialize"),MasterToken.load(callback.foo),expect(MasterToken.initialize).not.toHaveBeenCalled(),expect(callback.foo).toHaveBeenCalledWith(masterToken)})}),describe("hasBeenCreated method",function(){return it("should return false if master doesn't exists on storage",function(){var callback;return callback={foo:function(){}},spyOn(callback,"foo"),MasterToken.hasBeenCreated(callback.foo),expect(callback.foo).toHaveBeenCalledWith(!1)})}),it("setSecretKey method",function(){return spyOn(MasterToken,"save"),MasterToken.setSecretKey("secret-asdf-1234"),expect(MasterToken.save).toHaveBeenCalled()})})})});var __hasProp={}.hasOwnProperty,__extends=function(child,parent){function ctor(){this.constructor=child}for(var key in parent)__hasProp.call(parent,key)&&(child[key]=parent[key]);return ctor.prototype=parent.prototype,child.prototype=new ctor,child.__super__=parent.prototype,child};require(["models/base_model","test/mock/mock_chrome_storage","helpers/json_storage"],function(BaseModel,MockChromeStorage,JsonStorage){return describe("BaseModel",function(){var TestBaseModel,baseModel;return baseModel=null,window.chrome={storage:{local:MockChromeStorage}},beforeEach(function(){return baseModel=new TestBaseModel}),it("should load from local storage first and then from remote",function(){var listener,numCalls;return JsonStorage.save(baseModel.getStorageLocation(),[1,5,7]),baseModel.fetch=function(onSuccess){return baseModel.setModel([2,4,6]),baseModel.notifyListeners(),onSuccess()},numCalls=0,listener=function(){return numCalls++,1===numCalls&&expect(baseModel.getModel()).toEqual([1,5,7]),2===numCalls?expect(baseModel.getModel()).toEqual([2,4,6]):void 0},baseModel.addListener(listener),baseModel.load(function(){}),expect(numCalls).toEqual(2)}),it("can be saved to disk",function(){var callbackCalled;return callbackCalled=!1,baseModel.setModel([1,2,3,4,5]),baseModel.save(function(){return callbackCalled=!0}),expect(callbackCalled).toEqual(!0),JsonStorage.loadObject(baseModel.getStorageLocation(),function(data){return expect(data).toEqual([1,2,3,4,5])})}),describe("loadLocal",function(){return it("can be loaded from disk",function(){var callbackCalled,json;return json=[1,2,3,{a:123}],JsonStorage.save(baseModel.getStorageLocation(),json),callbackCalled=!1,baseModel.loadLocal(function(){return callbackCalled=!0}),expect(callbackCalled).toEqual(!0),expect(baseModel.getModel()).toEqual(json)}),it("should notify listeners when loading from loadLocal",function(){var called,listener;return JsonStorage.save(baseModel.getStorageLocation(),[1,2,3]),called=!1,listener=function(){return called=!0},baseModel.addListener(listener),baseModel.loadLocal(function(){}),expect(called).toEqual(!0)})}),describe("listeners",function(){return it("notifies listeners when notifyListeners is called",function(){var called,listener1,listener2;return called=[0,0],listener1=function(){return called[0]+=1},listener2=function(){return called[1]+=1},baseModel.addListener(listener1),baseModel.addListener(listener2),baseModel.notifyListeners(),expect(called).toEqual([1,1])}),it("can remove listeners",function(){var listener1;return listener1=function(){},baseModel.addListener(listener1),expect(baseModel.getListeners().length).toEqual(1),baseModel.removeListener(listener1),expect(baseModel.getListeners().length).toEqual(0)}),it("can add listeners",function(){var listener1,listener2,listener3;return listener1=function(){},listener2=function(){},listener3=function(){},baseModel.addListener(listener1),baseModel.addListener(listener2),baseModel.addListener(listener3),expect(baseModel.getListeners().length).toEqual(3)})}),it("can be created from a json object",function(){var innerModel,json;return json={a:123,b:"abc",c:!0},baseModel.fromJson(json),innerModel=baseModel.getModel(),expect(innerModel.a).toEqual(123),expect(innerModel.b).toEqual("abc"),expect(innerModel.c).toEqual(!0)}),it("can be serialized to a json object",function(){var json;return baseModel.setModel({a:123,b:"abc",c:!0}),json=baseModel.toJson(),expect(json).toEqual({a:123,b:"abc",c:!0})}),TestBaseModel=function(_super){function TestBaseModel(){TestBaseModel.__super__.constructor.apply(this,arguments)}return __extends(TestBaseModel,_super),TestBaseModel.prototype.getStorageLocation=function(){return"mock_chrome_storage"},TestBaseModel.prototype.fromJson=function(json){return this.setModel(json)},TestBaseModel.prototype.toJson=function(){return this.getModel()},TestBaseModel.prototype.isLoadedToMemory=function(){return null!==this.getModel()},TestBaseModel}(BaseModel)})}),require(["models/api/constants"],function(Constants){return describe("Constants",function(){return describe("Api url",function(){return it("should use the staging url if DEBUG is true",function(){return Constants.DEBUG=!0,expect(Constants.getServerUrl()).toBe("http://staging-2.authy.com")}),it("should use the production url if DEBUG is false",function(){return Constants.DEBUG=!1,expect(Constants.getServerUrl()).toBe("https://api.authy.com")})})})}),require(["models/devices/device_request_model"],function(DeviceRequestModel){return describe("DeviceRequestModel",function(){var deviceRequestModel;return deviceRequestModel=null,beforeEach(function(){return deviceRequestModel=DeviceRequestModel.get()}),afterEach(function(){return deviceRequestModel=null}),it("should have defined dependencies",function(){return[DeviceRequestModel].forEach(function(i){return expect(i).toBeDefined()})}),describe("setDeviceRequestPresent",function(){var listener;return listener=null,beforeEach(function(){return listener=jasmine.createSpy("listener"),deviceRequestModel.addListener(listener)}),it("should set the correct value for deviceRequestPresent variable and notify its listeners appropriately",function(){return deviceRequestModel.setDeviceRequestPresent(!1),expect(deviceRequestModel.isDeviceRequestPresent()).toEqual(!1),expect(listener).toHaveBeenCalledWith({deviceRequestPresent:!1}),deviceRequestModel.setDeviceRequestPresent(!0),expect(deviceRequestModel.isDeviceRequestPresent()).toEqual(!0),expect(listener).toHaveBeenCalledWith({deviceRequestPresent:!0})})})})}),require(["models/devices/devices_model","test/mock/mock_chrome_storage","helpers/json_storage","models/devices/device"],function(DevicesModel,MockChromeStorage,JsonStorage,Device){return describe("DevicesModel",function(){var d1,d2,devicesModel;return d1=new Device({city:"city",country:"country",deviceType:"deviceType",ip:"ip",lastSyncAt:"lastSyncAt",masterTokenId:1,name:"name",needsHealthCheck:"needsHealthCheck",region:"region",registered:"registered"}),d2=new Device({city:"city",country:"country",deviceType:"deviceType",ip:"ip",lastSyncAt:"lastSyncAt",masterTokenId:2,name:"name",needsHealthCheck:"needsHealthCheck",region:"region",registered:"registered"}),devicesModel=null,beforeEach(function(){return devicesModel=new DevicesModel,window.chrome={storage:{local:MockChromeStorage}}}),it("should be defined",function(){return expect(DevicesModel).toBeDefined()}),it("should load devices from api ",function(){return devicesModel.devicesApi.getDevices=function(onSuccess){var devices;return devices=[d1,d2],onSuccess(devices)},devicesModel.fetch(function(){}),expect(devicesModel.getDevices().length).toBe(2),expect(devicesModel.contains(d1)).toBe(!0),expect(devicesModel.contains(d2)).toBe(!0)}),it("should load devices",function(){return devicesModel.devicesApi.getDevices=function(onSuccess){var devices;return devices=[d1,d2],onSuccess(devices)},devicesModel.load(function(){}),expect(devicesModel.getDevices().length).toBe(2),expect(devicesModel.contains(d1)).toBe(!0),expect(devicesModel.contains(d2)).toBe(!0)}),it("should remove objects locally when calling removeById",function(){return devicesModel.addAll([d1,d2]),devicesModel.removeById(d1.id),expect(devicesModel.size()).toEqual(1),expect(devicesModel.contains(d1)).toEqual(!1),expect(devicesModel.contains(d2)).toEqual(!0)}),describe("removeDevice",function(){return it("should remove the device if the api response is successful",function(){var listener,timesCalled;return devicesModel.devicesApi.removeDevice=function(deviceId,onSuccess){return onSuccess()},devicesModel.addAll([d1,d2]),expect(devicesModel.size()).toEqual(2),timesCalled=0,listener=function(){return timesCalled++},devicesModel.addListener(listener),devicesModel.removeDevice(d1.id,function(){}),expect(devicesModel.size()).toEqual(1),expect(devicesModel.contains(d1)).toEqual(!1),expect(timesCalled).toEqual(1)}),it("should not remove the device if the api response if not successful",function(){var listener,timesCalled;return devicesModel.devicesApi.removeDevice=function(deviceId,onSuccess,onFail){return onFail()},devicesModel.addAll([d1,d2]),expect(devicesModel.size()).toEqual(2),timesCalled=0,listener=function(){return timesCalled++},devicesModel.addListener(listener),devicesModel.removeDevice(d1.id,function(){}),expect(devicesModel.size()).toEqual(2),expect(devicesModel.contains(d1)).toEqual(!0),expect(timesCalled).toEqual(0)})})})});var __hasProp={}.hasOwnProperty,__extends=function(child,parent){function ctor(){this.constructor=child}for(var key in parent)__hasProp.call(parent,key)&&(child[key]=parent[key]);return ctor.prototype=parent.prototype,child.prototype=new ctor,child.__super__=parent.prototype,child};require(["models/encrypted_base_model","test/mock/mock_chrome_storage","models/storage/encrypted_storage","models/storage/encryption_key"],function(EncryptedBaseModel,MockChromeStorage,EncryptedStorage,EncryptionKey){return xdescribe("EncryptedBaseModel",function(){var TestEncryptedBaseModel,loadKey,model,_ref;return model=null,beforeEach(function(){return window.chrome={storage:{local:MockChromeStorage}},model=new TestEncryptedBaseModel}),it("can be saved to local storage (encrypted)",function(){var callbackCalled;return loadKey(),model.setModel([1,2,3,4,5]),model.save(),callbackCalled=!1,EncryptedStorage.load(model.getStorageLocation(),function(data){return callbackCalled=!0,expect(data).toEqual([1,2,3,4,5])}),expect(callbackCalled).toEqual(!0)}),describe("loadLocal",function(){return it("can be loaded from local storage (encrypted)",function(){var callbackCalled;return loadKey(),EncryptedStorage.save(model.getStorageLocation(),[1,2,3,4],function(){}),callbackCalled=!1,model.loadLocal(function(){return callbackCalled=!0}),expect(callbackCalled).toEqual(!0),expect(model.getModel()).toEqual([1,2,3,4])}),it("will notifyListeners if there is something in storage",function(){var listener,listenerCalled;return loadKey(),EncryptedStorage.save(model.getStorageLocation(),[1,2,3,4],function(){}),listenerCalled=!1,listener=function(){return listenerCalled=!0},model.addListener(listener),model.loadLocal(function(){}),expect(listenerCalled).toEqual(!0)})}),loadKey=function(){return console.log("calling loadKey"),EncryptionKey.load("password",function(data){return console.log(data)})},TestEncryptedBaseModel=function(_super){function TestEncryptedBaseModel(){return _ref=TestEncryptedBaseModel.__super__.constructor.apply(this,arguments)}return __extends(TestEncryptedBaseModel,_super),TestEncryptedBaseModel.prototype.toJson=function(){return this.getModel()},TestEncryptedBaseModel.prototype.fromJson=function(json){return this.setModel(json)},TestEncryptedBaseModel.prototype.getStorageLocation=function(){return"mock_encrypted_base_model_storage"},TestEncryptedBaseModel}(EncryptedBaseModel)})}),require(["models/hash_set_model"],function(HashSetModel){return describe("HashSetModel",function(){var hashSetCollection;return hashSetCollection=null,beforeEach(function(){return hashSetCollection=new HashSetModel("mock-location")}),it("should be defined",function(){return expect(HashSetModel).toBeDefined()}),it("should initialize with an empty collection",function(){return expect(hashSetCollection.model).toBeDefined(),expect(hashSetCollection.model.toArray().length).toBe(0)}),it("should be able to add additional objects",function(){return expect(hashSetCollection.model.toArray()).toEqual([]),hashSetCollection.add({id:1}),expect(hashSetCollection.model.toArray().length).toEqual(1),hashSetCollection.add({id:2}),hashSetCollection.add({id:3}),expect(hashSetCollection.model.toArray().length).toEqual(3)}),it("should be able to clear all present objects",function(){return hashSetCollection.add({id:1}),hashSetCollection.add({id:2}),hashSetCollection.add({id:3}),expect(hashSetCollection.size()).toBe(3),hashSetCollection.clear(),expect(hashSetCollection.size()).toBe(0),expect(hashSetCollection.toArray()).toEqual([])}),it("should be able to remove an object, given an instance",function(){var tmp1,tmp2,tmp3;return tmp1={id:1},tmp2={id:2,a:1},tmp3={id:3,b:"c"},hashSetCollection.add(tmp1),hashSetCollection.add(tmp2),hashSetCollection.add(tmp3),hashSetCollection.remove(tmp1),expect(hashSetCollection.contains(tmp1)).toBe(!1),expect(hashSetCollection.size()).toBe(2),hashSetCollection.remove(tmp2),expect(hashSetCollection.contains(tmp2)).toBe(!1),expect(hashSetCollection.size()).toBe(1),hashSetCollection.remove(tmp3),expect(hashSetCollection.contains(tmp3)).toBe(!1),expect(hashSetCollection.size()).toBe(0)}),it("removing an already removed object should have no effect",function(){var tmp1,tmp2,tmp3;return tmp1={id:1},tmp2={id:2,a:1},tmp3={id:3,b:"c"},hashSetCollection.add(tmp1),hashSetCollection.add(tmp2),hashSetCollection.add(tmp3),hashSetCollection.remove(tmp1),expect(hashSetCollection.contains(tmp1)).toBe(!1),expect(hashSetCollection.size()).toBe(2),hashSetCollection.remove(tmp1),expect(hashSetCollection.contains(tmp1)).toBe(!1),expect(hashSetCollection.size()).toBe(2)}),it("should be able to return an array of all objects",function(){return hashSetCollection.add({id:1}),hashSetCollection.add({id:1}),hashSetCollection.add({id:1}),hashSetCollection.add({id:2}),hashSetCollection.add({id:3}),hashSetCollection.add({id:4}),expect(hashSetCollection.toArray()).toEqual([{id:1},{id:2},{id:3},{id:4}])}),it("should return an empty array if it has no objects",function(){return expect(hashSetCollection.toArray()).toEqual([])}),it("should give the size of the number of objects",function(){return hashSetCollection.add({id:1}),expect(hashSetCollection.size()).toEqual(1),hashSetCollection.add({id:1}),expect(hashSetCollection.size()).toEqual(1),hashSetCollection.add({id:1}),expect(hashSetCollection.size()).toEqual(1),hashSetCollection.add({id:2}),expect(hashSetCollection.size()).toEqual(2),hashSetCollection.add({id:3}),expect(hashSetCollection.size()).toEqual(3),hashSetCollection.add({id:4}),expect(hashSetCollection.size()).toEqual(4)}),it("should tell if an element is contained "),it("should notify listeners when an element is added",function(){var callback,callbackCalled;return callbackCalled=0,callback=function(){return callbackCalled++},hashSetCollection.addListener(callback),hashSetCollection.add(1),expect(callbackCalled).toBe(1)}),it("should notify listeners when an element is removed",function(){var callback,callbackCalled;return hashSetCollection.add(1),hashSetCollection.add(2),hashSetCollection.add(3),callbackCalled=0,callback=function(){return callbackCalled++},hashSetCollection.addListener(callback),hashSetCollection.remove(1),expect(callbackCalled).toBe(1)}),it("should notify listeners when cleared",function(){var callback,callbackCalled;return callbackCalled=0,callback=function(){return callbackCalled++},hashSetCollection.addListener(callback),hashSetCollection.clear(),expect(callbackCalled).toBe(1)})})}),require(["models/apps/master_token","models/apps/health_check"],function(MasterToken,HealthCheck){return describe("healtCheck",function(){var deviceId,healthCheck,masterToken,secretKey,userId;return userId="1234",deviceId="2345",secretKey="secret-asdf-1234",MasterToken.initialize(userId,deviceId,secretKey),masterToken=MasterToken.get(),healthCheck=HealthCheck.get(),it("should call onSucess when the api returns success",function(){var callback,called;return healthCheck.registrationApi.checkSecretSeed=function(mDeviceId,mAppId,sha,onSuccess){return expect(mDeviceId).toBe(deviceId),expect(mAppId).toBe(deviceId),expect(sha).not.toBe(null),expect(sha).toBeDefined(),onSuccess()},called=!1,callback=function(){return called=!0},healthCheck.run({onSuccess:callback}),expect(called).toBe(!0)}),it("should call onFail when the api returns a failed message",function(){var callback,called;return healthCheck.registrationApi.checkSecretSeed=function(mDeviceId,mAppId,sha,onSuccess,onFail){return expect(mDeviceId).toBe(deviceId),expect(mAppId).toBe(deviceId),expect(sha).not.toBe(null),expect(sha).toBeDefined(),onFail({message:"fail"})},called=!1,callback=function(){return called=!0},healthCheck.run({onFail:callback}),expect(called).toBe(!0)})})}),require(["models/messaging/message_client","models/messaging/message_server"],function(MessageClient,MessageServer){return describe("MessageClient",function(){var client,messageServer,onMessageExternal,sendMessage,server;return messageServer=null,client=null,sendMessage=null,server=null,onMessageExternal=function(){},beforeEach(function(){return server={method1:function(){}},spyOn(server,"method1"),messageServer=new MessageServer({onMessageExternal:function(){}}),messageServer.addServer(server),client=new MessageClient({sendMessage:function(serverId,data){return messageServer.listener(data,{id:serverId},{})}})}),it("should have defined deps",function(){return expect(MessageClient).toBeDefined(),expect(MessageServer).toBeDefined()}),it("should call the servers' method",function(){return client.send("method1",{},function(){}),expect(server.method1).toHaveBeenCalled()}),it("should should send the correct parameters",function(){var params;return params={a:1,b:{c:[1,2,3,4],d:{cheese:"fries"}}},client.send("method1",params,function(){}),expect(server.method1).toHaveBeenCalledWith(params,{})})})}),require(["models/messaging/message_server"],function(MessageServer){return describe("MessageServer",function(){var messageServer,server,server2;return messageServer=null,server=null,server2=null,beforeEach(function(){var options;return server={method1:function(){},method2:function(){}},server2={method1:function(){}},spyOn(server,"method1"),spyOn(server,"method2"),spyOn(server2,"method1"),options={onMessageExternal:function(){}},messageServer=new MessageServer(options)}),it("should initialize with no servers",function(){return expect(messageServer.servers.length).toBe(0)}),describe("addServer",function(){return it("should increase the servers count",function(){var numServers;return numServers=messageServer.servers.length,messageServer.addServer({}),expect(messageServer.servers.length).toBe(numServers+1)})}),describe("listener",function(){return beforeEach(function(){return messageServer.addServer(server)}),it("should call the server with the method that matches the action",function(){var sendResponse;return sendResponse={id:123},messageServer.listener({action:"method1"},{id:123},sendResponse),expect(server.method1).toHaveBeenCalledWith({},sendResponse),expect(server.method2).not.toHaveBeenCalled()}),it("should send the parameters as the first parameter",function(){var params,sendResponse;return sendResponse={id:"id"},params={a:1,b:2,c:"3"},messageServer.listener({action:"method2",params:params},{id:123},sendResponse),expect(server.method2).toHaveBeenCalledWith(params,sendResponse)}),it("should not call any server if the action does not match any method",function(){return messageServer.listener({action:"foobar",params:{}},{id:123},{}),expect(server.method2).not.toHaveBeenCalled(),expect(server.method1).not.toHaveBeenCalled()}),it("should call every matching server's method",function(){var sendResponse;return messageServer.addServer(server2),sendResponse={id:123},messageServer.listener({action:"method1"},{id:123},sendResponse),expect(server.method1).toHaveBeenCalled(),expect(server2.method1).toHaveBeenCalled()}),it("should pass parameters correctly to the servers",function(){var params;return params={a:"123",b:123,c:[1,2,3,"123"],d:{f:[1,2,3]}},messageServer.listener({action:"method1",params:params},{id:123},{}),expect(server.method1).toHaveBeenCalledWith(params,{})})})})}),require(["models/messaging/status_server","helpers/window_helper"],function(StatusServer,WindowHelper){return describe("StatusServer",function(){var statusServer;return statusServer=null,beforeEach(function(){return statusServer=new StatusServer,spyOn(WindowHelper,"focus")}),describe("focus",function(){return it("should call sendResponse with success:true",function(){var func;return func={sendResponse:function(){}},spyOn(func,"sendResponse"),statusServer.focus({},func.sendResponse),expect(func.sendResponse).toHaveBeenCalledWith({success:!0})}),it("should call WindowHelper.focus",function(){return statusServer.focus({},function(){}),expect(WindowHelper.focus).toHaveBeenCalled()})}),describe("getStatus",function(){return it("should call sendResponse with status:true",function(){var func;return func={sendResponse:function(){}},spyOn(func,"sendResponse"),statusServer.getStatus({},func.sendResponse),expect(func.sendResponse).toHaveBeenCalledWith({status:!0})})})})}),require(["models/model_collection"],function(ModelCollection){return describe("ModelCollection",function(){var modelCollection;return modelCollection=null,beforeEach(function(){return modelCollection=new ModelCollection("mock-location")}),it("should be defined",function(){return expect(ModelCollection).toBeDefined()}),it("should initialize with an empty collection",function(){return expect(modelCollection.model).toBeDefined(),expect(modelCollection.model.length).toBe(0)}),it("should be able to add additional objects",function(){return expect(modelCollection.model).toEqual([]),modelCollection.add({}),expect(modelCollection.size()).toBe(1),expect(modelCollection.model).toEqual([{}]),modelCollection.add({}),modelCollection.add({}),expect(modelCollection.size()).toBe(3),expect(modelCollection.model).toEqual([{},{},{}])}),it("should be able to clear all present objects",function(){return modelCollection.add(1),modelCollection.add(2),modelCollection.add(3),expect(modelCollection.size()).toBe(3),modelCollection.clear(),expect(modelCollection.size()).toBe(0),expect(modelCollection.model).toEqual([])}),it("should be able to remove an object, given an instance",function(){var tmp1,tmp2,tmp3;return tmp1={},tmp2={a:1},tmp3={b:"c"},modelCollection.add(tmp1),modelCollection.add(tmp2),modelCollection.add(tmp3),modelCollection.remove(tmp1),expect(modelCollection.contains(tmp1)).toBe(!1),expect(modelCollection.size()).toBe(2),modelCollection.remove(tmp2),expect(modelCollection.contains(tmp2)).toBe(!1),expect(modelCollection.size()).toBe(1),modelCollection.remove(tmp3),expect(modelCollection.contains(tmp3)).toBe(!1),expect(modelCollection.size()).toBe(0)}),it("removing an already removed object should have no effect",function(){var tmp1,tmp2,tmp3;return tmp1={},tmp2={a:1},tmp3={b:"c"},modelCollection.add(tmp1),modelCollection.add(tmp2),modelCollection.add(tmp3),modelCollection.remove(tmp1),expect(modelCollection.contains(tmp1)).toBe(!1),expect(modelCollection.size()).toBe(2),modelCollection.remove(tmp1),expect(modelCollection.contains(tmp1)).toBe(!1),expect(modelCollection.size()).toBe(2)}),it("should be able to return an array of all objects",function(){return modelCollection.add(1),modelCollection.add(1),modelCollection.add(1),modelCollection.add(2),modelCollection.add(3),modelCollection.add(4),expect(modelCollection.toArray()).toEqual([1,1,1,2,3,4])}),it("should return an empty array if it has no objects",function(){return expect(modelCollection.toArray()).toEqual([])}),it("should give the size of the number of objects",function(){return modelCollection.add(1),expect(modelCollection.size()).toEqual(1),modelCollection.add(1),expect(modelCollection.size()).toEqual(2),modelCollection.add(1),expect(modelCollection.size()).toEqual(3),modelCollection.add(2),expect(modelCollection.size()).toEqual(4),modelCollection.add(3),expect(modelCollection.size()).toEqual(5),modelCollection.add(4),expect(modelCollection.size()).toEqual(6)}),it("should tell if an element is contained "),it("should notify listeners when an element is added",function(){var callback,callbackCalled;return callbackCalled=0,callback=function(){return callbackCalled++},modelCollection.addListener(callback),modelCollection.add(1),expect(callbackCalled).toBe(1)}),it("should notify listeners when an element is removed",function(){var callback,callbackCalled;return modelCollection.add(1),modelCollection.add(2),modelCollection.add(3),callbackCalled=0,callback=function(){return callbackCalled++},modelCollection.addListener(callback),modelCollection.remove(1),expect(callbackCalled).toBe(1)}),it("should notify listeners when cleared",function(){var callback,callbackCalled;return callbackCalled=0,callback=function(){return callbackCalled++},modelCollection.addListener(callback),modelCollection.clear(),expect(callbackCalled).toBe(1)})})}),require(["models/otp_generator/authy_timer"],function(AuthyTimer){return describe("AuthyTimer",function(){var timer;return timer=new AuthyTimer,it("should have defined dependencies",function(){return[AuthyTimer].forEach(function(i){return expect(i).toBeDefined()})}),describe("getTimeRemaining",function(){return it("should return the correct time remaining",function(){return expect(timer.getTimeRemaining()).toEqual(AuthyTimer.TIMER_INTERVAL)})})})}),require(["models/otp_generator/google_authenticator_otp_generator","helpers/totp"],function(GoogleAuthenticatorOtpGenerator,TOTP){return xdescribe("GoogleAuthenticatorOtpGenerator",function(){return it("shoud have a time step of 30",function(){return expect(GoogleAuthenticatorOtpGenerator.TIME_STEP).toBe(30)}),it("shoud have an otp length of 6",function(){return expect(GoogleAuthenticatorOtpGenerator.OTP_LENGTH).toBe(6)}),it("should generate otps same as TOTP with time_step of 30 and otp_length of 6",function(){var otpGen,secret;return otpGen=new GoogleAuthenticatorOtpGenerator,secret="3132333435363738393031323334353637383930",expect(otpGen.getOtp(secret)).toBe(TOTP.totp(secret,TOTP.time(),6)),expect(otpGen.getOtp(secret)).toBe(TOTP.totp(secret,TOTP.time(),6)),expect(otpGen.getOtp(secret)).toBe(TOTP.totp(secret,TOTP.time(),6)),expect(otpGen.getOtp(secret)).toBe(TOTP.totp(secret,TOTP.time(),6))})})}),require(["models/otp_generator/google_auth_timer","helpers/date_helper"],function(GoogleAuthTimer,DateHelper){return describe("GoogleAuthTimer",function(){var timer;return timer=new GoogleAuthTimer,it("should have defined dependencies",function(){return[GoogleAuthTimer,DateHelper].forEach(function(i){return expect(i).toBeDefined()})}),describe("getTimeRemaining",function(){var date;return date=new Date,date.setHours(15),date.setMinutes(50),it("should return the correct remaining seconds",function(){return date.setSeconds(29),expect(timer.getTimeRemaining({date:date})).toEqual(1),date.setSeconds(30),expect(timer.getTimeRemaining({date:date})).toEqual(30),date.setSeconds(0),expect(timer.getTimeRemaining({date:date})).toEqual(30),date.setSeconds(1),expect(timer.getTimeRemaining({date:date})).toEqual(29),date.setSeconds(15),expect(timer.getTimeRemaining({date:date})).toEqual(15)})})})}),require(["models/otp_generator/timer"],function(Timer){return describe("Timer",function(){var timer;return timer=null,beforeEach(function(){return timer=new Timer,jasmine.Clock.useMock(),spyOn(timer,"getTimeRemaining").andReturn(20)}),it("should have defined dependencies",function(){return[jasmine,Timer].forEach(function(i){return expect(i).toBeDefined()})}),describe("startTimer",function(){return it("should set the remaining time",function(){return timer.startTimer(),expect(timer.timeRemaining).toEqual(20),expect(timer.intervalId).toBeDefined()}),it("should set 1 second interval to call updateTimer",function(){return spyOn(timer,"updateTimer"),timer.startTimer(),jasmine.Clock.tick(1e3),expect(timer.updateTimer.callCount).toEqual(1),jasmine.Clock.tick(1e3),expect(timer.updateTimer.callCount).toEqual(2)}),it("should stop timer if timer is already running",function(){return spyOn(timer,"isTimerRunning").andReturn(!0),spyOn(timer,"stopTimer"),timer.startTimer(),expect(timer.stopTimer).toHaveBeenCalled()})}),describe("stopTimer",function(){return it("should clear interval",function(){var intervalId;return spyOn(window,"clearInterval").andCallThrough(),timer.startTimer(),intervalId=timer.intervalId,timer.stopTimer(),expect(window.clearInterval).toHaveBeenCalledWith(intervalId),expect(timer.intervalId).toEqual(null)})}),describe("isTimerRunning",function(){return it("should return true if intervalId is defined",function(){return timer.intervalId="123456",expect(timer.isTimerRunning()).toEqual(!0)}),it("should return false if intervalId is undefined or null",function(){return timer.intervalId=void 0,expect(timer.isTimerRunning()).toEqual(!1),timer.intervalId=null,expect(timer.isTimerRunning()).toEqual(!1)})}),describe("updateTimer",function(){var timeRemaining,updateTimerCb,updateTokensCb;
return updateTokensCb=null,updateTimerCb=null,timeRemaining=20,beforeEach(function(){return updateTokensCb=jasmine.createSpy("dummy1"),updateTimerCb=jasmine.createSpy("dummy2"),timer=new Timer({updateTokensCb:updateTokensCb,updateTimerCb:updateTimerCb}),timer.timeRemaining=timeRemaining,spyOn(timer,"startTimer"),spyOn(timer,"stopTimer")}),it("should decrease the remaining time",function(){return timer.updateTimer(),expect(timer.timeRemaining).toEqual(timeRemaining-1)}),it("should call updateTimerCb when the timer has not reached 0",function(){return timer.updateTimer(),expect(updateTimerCb).toHaveBeenCalledWith(timeRemaining-1)}),it("should call updateTokensCb when the timer reaches 0 and restart",function(){return timer.timeRemaining=1,timer.updateTimer(),expect(timer.startTimer).toHaveBeenCalled(),expect(updateTokensCb).toHaveBeenCalledWith(),expect(timer.stopTimer).toHaveBeenCalled()})}),afterEach(function(){return timer.stopTimer()})})}),require(["models/security/phishing_detector"],function(PhishingDetector){return describe("PhishingDetector",function(){return describe("whitelist",function(){return it("should have a whitelist",function(){return expect(PhishingDetector.WHITE_LIST).toBeDefined(),expect(PhishingDetector.WHITE_LIST.length>0).toBe(!0)}),it("should have items with name and domain",function(){var whitelist,whitelisted,_i,_len,_results;for(whitelist=PhishingDetector.WHITE_LIST,_results=[],_i=0,_len=whitelist.length;_len>_i;_i++)whitelisted=whitelist[_i],expect(whitelisted.name).toBeDefined(),_results.push(expect(whitelisted.domain).toBeDefined());return _results})}),describe("getRelatedDomain",function(){return it("should return the domain name that matches the app name",function(){var relatedDomain;return relatedDomain=PhishingDetector.getRelatedDomain("google","cerds cerds"),expect(relatedDomain).toBe("google.com")}),it("should return null if the domain name or account type does not match anything",function(){var relatedDomain;return relatedDomain=PhishingDetector.getRelatedDomain("cerds","muy cerds"),expect(relatedDomain).toBe(null)}),it("should return the domain name that matches the account type",function(){var relatedDomain;return relatedDomain=PhishingDetector.getRelatedDomain("asdfasdf","twitch"),expect(relatedDomain).toBe("twitch.tv")}),it("should return the domain name for authy dashboard",function(){var relatedDomain;return relatedDomain=PhishingDetector.getRelatedDomain("authy dashboard","authy dashboard"),expect(relatedDomain).toBe("authy.com")})}),describe("isSafe",function(){return it("should return that account is safe when its associated url is in the open tabs list",function(){var openTabUrls,safe;return openTabUrls=["https://accounts.google.com/ServiceLogin","http://dashboard.authy.com/users/98/two-factor"],safe=PhishingDetector.isSafe("my gmail","gmail",openTabUrls),expect(safe).toBe(!0)}),it("should return that account is not safe when its not https even though the url hostname is open",function(){var openTabUrls,safe;return openTabUrls=["https://accounts.google.com/ServiceLogin","http://dashboard.authy.com/users/98/two-factor"],safe=PhishingDetector.isSafe("authy dashboard","authy dashboard",openTabUrls),expect(safe).toBe(!1)}),it("should return that authy dashboard is safe when its associated url is in the open tabs list",function(){var openTabUrls,safe;return openTabUrls=["https://accounts.google.com/ServiceLogin","https://dashboard.authy.com/users/98/two-factor"],safe=PhishingDetector.isSafe("authy dashboard","authy dashboard",openTabUrls),expect(safe).toBe(!0)})}),describe("isHttps",function(){return it("should return false if url is http",function(){return expect(PhishingDetector.isHttps("http://a.b.c")).toBe(!1)}),it("should return false if url is ftps",function(){return expect(PhishingDetector.isHttps("ftps://a.b.c")).toBe(!1)}),it("should return false if url is chrome",function(){return expect(PhishingDetector.isHttps("ftps://a.b.c")).toBe(!1)}),it("should return true if url is https",function(){return expect(PhishingDetector.isHttps("https://a.b.c")).toBe(!0)})}),describe("getDomainName",function(){return it("should return the domain name without subdomain",function(){return expect(PhishingDetector.getDomainName("https://asdf.cm")).toBe("asdf.cm"),expect(PhishingDetector.getDomainName("http://eat.cheese")).toBe("eat.cheese")}),it("should return the domain name",function(){return expect(PhishingDetector.getDomainName("https://a.b.c.d.asdf.cm")).toBe("asdf.cm")}),it("should return the correct domain name for authy login",function(){return expect(PhishingDetector.getDomainName("https://dashboard.authy.com/users/98/two-factor")).toBe("authy.com")}),it("should return the correct domain name for google login",function(){return expect(PhishingDetector.getDomainName("https://accounts.google.com/ServiceLogin")).toBe("google.com")})})})}),require(["models/storage/encrypted_storage","test/mock/mock_chrome_storage"],function(EncryptedStorage,MockChromeStorage){return describe("EncryptedStorage",function(){var saveableObject;return window.chrome={storage:{local:MockChromeStorage}},saveableObject={name:"foo",lastName:"bar",age:20},xit("should receive an object and encrypt it with a plain text password",function(){var storage;return storage=new EncryptedStorage,storage.setEncryptionKey("qwerty"),storage.save()})})}),require(["helpers/json_storage","models/storage/encryption_key","test/mock/mock_chrome_storage"],function(JsonStorage,EncryptionKey,MockChromeStorage){return xdescribe("EncryptionKey",function(){return describe("load",function(){return beforeEach(function(){return MockChromeStorage.mock(),MockChromeStorage.clear()}),it("should be loaded from local storage if already present",function(){var callbackCalled;return JsonStorage.save(EncryptionKey.STORAGE_KEY,{salt:"123",verification:"234"}),callbackCalled=!1,EncryptionKey.load("qwerty",!1,function(data){return expect(data.salt).toEqual("123"),expect(data.verification).toEqual("234"),callbackCalled=!0}),expect(callbackCalled).toBe(!0)}),it("should be created if not present in local storage",function(){var callback2Called,callbackCalled;return spyOn(EncryptionKey,"create").andCallThrough(),callbackCalled=!1,callback2Called=!1,EncryptionKey.load("qwerty",!1,function(){return expect(EncryptionKey.create).toHaveBeenCalledWith("qwerty"),JsonStorage.loadObject(EncryptionKey.STORAGE_KEY_HAS_PWD,function(data2){return expect(data2.isDefaultPassword).toEqual(!1),callback2Called=!0}),callbackCalled=!0}),expect(callbackCalled).toBe(!0),expect(callback2Called).toBe(!0)})}),describe("create",function(){return it("should be initialized with create",function(){var key,password;return password="1234asdf",key=EncryptionKey.create(password),expect(key).not.toBeNull(),expect(key.salt).not.toBeNull(),expect(key.verification).toEqual(key.encrypt(key.salt))})}),describe("encrypt and decrypt",function(){return it("can be used to produce a cyphertext and retreive the original",function(){var cyphertext,key,password,plaintext;return password=Math.random()+"cheese",plaintext="cheese is random string foo 123",key=EncryptionKey.create(password),cyphertext=key.encrypt(plaintext),expect(key.decrypt(cyphertext)).toEqual(plaintext)})}),describe("hasBeenCreated",function(){return beforeEach(function(){return MockChromeStorage.mock(),MockChromeStorage.clear()}),it("should return true if encrption key has been created",function(){var called;return JsonStorage.save(EncryptionKey.STORAGE_KEY,{salt:"123",verification:"234"}),called=!1,EncryptionKey.hasBeenCreated(function(hasBeenCreated){return expect(hasBeenCreated).toEqual(!0),called=!0}),expect(called).toEqual(!0)}),it("should return false if encrption key has not been created",function(){var called;return called=!1,EncryptionKey.hasBeenCreated(function(hasBeenCreated){return expect(hasBeenCreated).toEqual(!1),called=!0}),expect(called).toEqual(!0)})}),describe("userHasSetPassword",function(){return beforeEach(function(){return MockChromeStorage.mock(),MockChromeStorage.clear(),EncryptionKey.USER_HAS_SET_PWD=null}),it("should return false if it is a new user",function(){var called;return called=!1,EncryptionKey.userHasSetPassword(function(userHasSetPassword){return expect(userHasSetPassword).toEqual(!1),called=!0}),expect(called).toEqual(!0)}),it("should return false if it is a new user who registered and got set the default password",function(){var called;return JsonStorage.save(EncryptionKey.STORAGE_KEY,{salt:"123",verification:"234"}),JsonStorage.save(EncryptionKey.STORAGE_KEY_HAS_PWD,{isDefaultPassword:!0}),called=!1,EncryptionKey.userHasSetPassword(function(userHasSetPassword){return expect(userHasSetPassword).toEqual(!1),called=!0}),expect(called).toEqual(!0)}),it("should return true if it is a user who had set the password in the previous version of the app",function(){var called;return JsonStorage.save(EncryptionKey.STORAGE_KEY,{salt:"123",verification:"234"}),called=!1,EncryptionKey.userHasSetPassword(function(userHasSetPassword){return expect(userHasSetPassword).toEqual(!0),called=!0}),expect(called).toEqual(!0)}),it("should return true if it is a user who has set the password in the new version of the app",function(){var called;return JsonStorage.save(EncryptionKey.STORAGE_KEY,{salt:"123",verification:"234"}),JsonStorage.save(EncryptionKey.STORAGE_KEY_HAS_PWD,{userHasSetPassword:!0}),called=!1,EncryptionKey.userHasSetPassword(function(userHasSetPassword){return expect(userHasSetPassword).toEqual(!0),called=!0}),expect(called).toEqual(!0)}),it("should return the same value as the one stored in memory if stored",function(){var called;return EncryptionKey.USER_HAS_SET_PWD=!0,called=!1,EncryptionKey.userHasSetPassword(function(userHasSetPassword){return expect(userHasSetPassword).toEqual(!0),called=!0}),expect(called).toEqual(!0),EncryptionKey.USER_HAS_SET_PWD=!1,called=!1,EncryptionKey.userHasSetPassword(function(userHasSetPassword){return expect(userHasSetPassword).toEqual(!1),called=!0}),expect(called).toEqual(!0)})}),describe("changePassword",function(){return beforeEach(function(){return MockChromeStorage.mock(),MockChromeStorage.clear(),EncryptionKey.USER_HAS_SET_PWD=null,EncryptionKey.CHANGE_PWD_EVENT_LISTENERS=[]}),it("should change the password",function(){var called;return JsonStorage.save(EncryptionKey.STORAGE_KEY,{salt:"123",verification:"234"}),called=!1,EncryptionKey.changePassword("qwerty",function(){return expect(EncryptionKey.get().salt).toNotEqual("123"),expect(EncryptionKey.get().verification).toNotEqual("234"),called=!0}),expect(called).toEqual(!0)}),it("should set that the user has set the password to true",function(){var called;return called=!1,EncryptionKey.changePassword("qwerty",function(){return expect(EncryptionKey.USER_HAS_SET_PWD).toEqual(!0),called=!0}),expect(called).toEqual(!0)}),it("should notify all of its listeners that the password is changing",function(){var called,save,saveCount;return saveCount=0,save=function(cb){return null==cb&&(cb=function(){}),saveCount++,cb()},EncryptionKey.CHANGE_PWD_EVENT_LISTENERS=[{save:save},{save:save}],called=!1,EncryptionKey.changePassword("qwerty",function(){return expect(saveCount).toEqual(EncryptionKey.CHANGE_PWD_EVENT_LISTENERS.length),called=!0}),expect(called).toEqual(!0)})})})}),require(["test/mock/mock_chrome_storage"],function(MockChromeStorage){return describe("MockChromeStorage",function(){var storage;return storage=MockChromeStorage,xdescribe("set({key:object}, callback)",function(){var callback,response;return response=void 0,callback=function(data){return response=data},it("should allow storage of strings ",function(){return storage.set({foo:"bar"}),storage.get({foo:null},callback),expect(response).toBe("bar")}),it("should allow storage of nulls ",function(){return storage.set({foo:null}),storage.get({foo:null},callback),expect(response).toBeNull()}),it("should allow storage of complex objects",function(){var obj;return obj={name:"foo",lastName:"bar",age:123,data:{a:"a",b:"b"}},storage.set({a:obj}),storage.get({a:null},callback),expect(response).not.toBeNull(),expect(response.name).toEqual("foo"),expect(response.lastName).toEqual("bar"),expect(response.age).toEqual(123),expect(response.data).toBeDefined(),expect(response.data.a).toEqual("a"),expect(response.data.b).toEqual("b")}),it("should override storage when the key is duplicate",function(){return storage.set({foo:"bar"}),storage.get({foo:null},callback),expect(response).toBe("bar"),storage.set({foo:"baz"}),storage.get({foo:null},callback),expect(response).toBe("baz")})}),describe("get({key:default}, callback)",function(){return it("should return null when nothing has been saved before",function(){}),it("should return an object when an object has been saved before",function(){})})})}),require(["models/sync/sync_add_device_request"],function(SyncAddDeviceRequest){return describe("SyncAddDeviceRequest",function(){var mockResponse,syncAddDeviceRequest;return syncAddDeviceRequest=null,mockResponse=null,beforeEach(function(){return syncAddDeviceRequest=new SyncAddDeviceRequest,mockResponse={confirmationToken:"00990999",ip:"127.0.0.1",requestId:"000022209",name:"My awesome windows device! (not)"}}),it("should update device request model when a new device request is successfully fetched",function(){return syncAddDeviceRequest.onFetchRequestSuccess(mockResponse),expect(syncAddDeviceRequest.deviceRequestModel.model).toEqual(mockResponse),expect(syncAddDeviceRequest.deviceRequestModel.isDeviceRequestPresent()).toEqual(!0)})})}),require(["models/user_info_model","test/mock/mock_chrome_storage","helpers/json_storage"],function(UserInfoModel,MockChromeStorage){return describe("UserInfoModel",function(){var userInfoModel;return window.chrome={storage:{local:MockChromeStorage}},userInfoModel=null,beforeEach(function(){return userInfoModel=new UserInfoModel,userInfoModel.getStorageLocation=function(){return"mock_user_info_storage"}}),it("should initialize correctly",function(){return expect(userInfoModel.accountApi).toBeDefined(),expect(userInfoModel.devicesApi).toBeDefined(),expect(userInfoModel.model).toBe(null)}),it("should be able to convert from and to json",function(){var data,json,userInfo;return userInfo={multiDevicesEnabled:!0,countryCode:1,cellphone:"123-456-312",email:"a@b.c",userId:"1234"},userInfoModel.setModel(userInfo),json=userInfoModel.toJson(),expect(json.email).toBeDefined(),expect(json.countryCode).toBeDefined(),expect(json.cellphone).toBeDefined(),expect(json.userId).toBeDefined(),expect(json.multiDevicesEnabled).toBeDefined(),data=userInfoModel.fromJson(json),expect(json.email).toEqual(data.email),expect(json.countryCode).toEqual(data.countryCode),expect(json.cellphone).toEqual(data.cellphone),expect(json.userId).toEqual(data.userId),expect(json.multiDevicesEnabled).toEqual(data.multiDevicesEnabled)}),it("should be able to fetch the user data",function(){var callbackCalled;return userInfoModel.accountApi.getUserInfo=function(onSuccess){var userInfo;return userInfo={multiDevicesEnabled:!1,countryCode:"1",cellphone:"1234",email:"foo@bar.com",userId:1234},onSuccess(userInfo)},callbackCalled=!1,userInfoModel.fetch(function(){return callbackCalled=!0,expect(userInfoModel.model).not.toBeNull(),expect(userInfoModel.model.multiDevicesEnabled).toBe(!1),expect(userInfoModel.model.countryCode).toBe("1"),expect(userInfoModel.model.cellphone).toBe("1234"),expect(userInfoModel.model.email).toBe("foo@bar.com"),expect(userInfoModel.model.userId).toBe(1234),expect(userInfoModel.isMultiDeviceEnabled()).toBe(!1),expect(userInfoModel.getCountryCode()).toBe("1"),expect(userInfoModel.getCellphone()).toBe("1234"),expect(userInfoModel.getEmail()).toBe("foo@bar.com"),expect(userInfoModel.getUserId()).toBe(1234)}),expect(callbackCalled).toEqual(!0)}),it("should call the onError function when fetching the data fails",function(){var onFailCalled;return userInfoModel.accountApi.getUserInfo=function(onSuccess,onFail){return onFail({success:"false",message:"something is fucked up :)"})},onFailCalled=!1,userInfoModel.fetch(void 0,function(){return onFailCalled=!0}),expect(onFailCalled).toBe(!0)}),it("should be able to register listeners, but not allow repeated listeners",function(){var f;return expect(userInfoModel.getListeners()).toBeDefined(),expect(userInfoModel.getListeners().length).toBe(0),f=function(){},userInfoModel.addListener(f),expect(userInfoModel.getListeners().length).toBe(1),userInfoModel.addListener(f),userInfoModel.addListener(f),userInfoModel.addListener(f),expect(userInfoModel.getListeners().length).toBe(1)}),it("should call every listener when notifyListeners is invoked",function(){var f1,f1Called,f2,f2Called;return f1Called=!1,f2Called=!1,f1=function(){return f1Called=!0},f2=function(){return f2Called=!0},userInfoModel.addListener(f1),userInfoModel.addListener(f2),expect(userInfoModel.getListeners().length).toBe(2),userInfoModel.notifyListeners(),expect(f1Called).toBe(!0),expect(f2Called).toBe(!0)}),it("should call the API when nothing is stored in disk",function(){var cb,numCalls;return MockChromeStorage.clear(),userInfoModel.accountApi.getUserInfo=function(onSuccess){var userInfo;return userInfo={multiDevicesEnabled:!1,countryCode:"1",cellphone:"1234",email:"foo@bar.com",userId:1234},onSuccess(userInfo)},numCalls=0,cb=function(){return numCalls++},userInfoModel.addListener(cb),userInfoModel.load(function(){}),expect(numCalls).toBe(1),userInfoModel.load(function(){}),expect(numCalls).toBe(4)})})}),define("test/spec/scenario/registration_scenario_spec",["controllers/registration_controller","controllers/registration_pin_controller","test/mock/apis/mock_registration_api","test/mock/mock_window_helper","ui/helpers/registration_nav_helper","test/mock/mock_mixpanel","ui/router"],function(RegistrationController,RegistrationPinController,MockRegistrationApi,MockWindowHelper,RegistrationNavHelper,MockMixPanel,Router){return describe("Registration",function(){var api,controller,enterCellPhoneExistingUser,enterCellPhoneNewUser,enterEmailNewUser,expectBody,load,pin_controller,selectVerificationType;return api=new MockRegistrationApi,controller=new RegistrationController({registrationApi:api}),pin_controller=new RegistrationPinController({registrationApi:api}),Router.get().register("RegistrationController",controller),Router.get().register("RegistrationPinController",pin_controller),$("head").append('<link rel="stylesheet" type="text/css" href="base/public/css/app.css">'),expectBody=function(){return expect($.trim($("body").text()))},load=function(view){return runs(function(){return view.loadTemplate(function(){})}),waitsFor(function(){return view.isTemplateLoaded()},"the view template to load: "+view.template,3e3)},enterCellPhoneExistingUser=function(){return runs(function(){return api.shouldSucceed(1,"active","1234"),$("#country-code-0").val("1"),$("#txtCellphone").val("123-123"),$("#btnGetDeviceStatus").trigger("click")}),waitsFor(function(){return $("#sectionVerification").is(":visible")},"the user action to be completed",1e3)},enterCellPhoneNewUser=function(){return runs(function(){return api.shouldSucceed(0,"new","2234"),$("#country-code-0").val("1"),$("#txtCellphone").val("123-123"),$("#btnGetDeviceStatus").trigger("click")}),waitsFor(function(){return $("#txtEmail").is(":visible")},"the user action to be completed",1e3)},enterEmailNewUser=function(){return runs(function(){return $("#txtEmail").val("juan@pan.co"),$("#btnSetEmail").trigger("click")}),waitsFor(function(){return $("#sectionVerification").is(":visible")},"the user action to be completed",1e3)},selectVerificationType=function(type){return type=_.str.capitalize(type),runs(function(){return spyOn(pin_controller,"goTo"),api.shouldSucceed("Server message.","123456","54","twilio"),$("#verification"+type).trigger("click")}),waitsFor(function(){return $("#section"+type).is(":visible")},"the user action to be completed",1e3)},beforeEach(function(){return MockWindowHelper.mock(),MockMixPanel.mock(),controller.registrationView.getTemplateLocation=function(){return"base/public/ui/mustaches"},controller.registrationView.partials=[],RegistrationNavHelper.ANIM_TIME=0,load(controller.registrationView)}),it("should have dependencies defined",function(){return expect(RegistrationController).toBeDefined(),expect(jasmine).toBeDefined()}),describe("Registration Flow",function(){return beforeEach(function(){return runs(function(){return $("body").html("foo-bar"),controller.show()}),waitsFor(function(){return $(".registration-screen").is(":visible")},"the view to have rendered completely",1e3),runs(function(){return expect($("#sectionVerification").is(":visible")).toEqual(!1)})}),it('should initally display "Lets set up your computer."',function(){return runs(function(){return expectBody().toContain("Let's set up your computer.")})}),it("should display the verification section when an existing user enters cellphone",function(){return enterCellPhoneExistingUser(),runs(function(){return expect($("#sectionVerification").is(":visible")).toBe(!0)})}),it("should display the email section when a new user enters cellphone",function(){return enterCellPhoneNewUser(),runs(function(){return expect($("#txtEmail").is(":visible")).toBe(!0),expect($("#sectionVerification").is(":visible")).toBe(!1)})}),it("should display verification section when new user enters email",function(){return enterCellPhoneNewUser(),enterEmailNewUser(),runs(function(){return expect($("#txtEmail").is(":visible")).toBe(!0),expect($("#sectionVerification").is(":visible")).toBe(!0)})}),it("should display the sms section when user selects sms verification",function(){return enterCellPhoneExistingUser(),selectVerificationType("sms"),runs(function(){return expect($("#sectionSms").is(":visible")).toBe(!0),expect($("#sectionCall").is(":visible")).toBe(!1),expect($("#sectionPush").is(":visible")).toBe(!1)})}),it("should display the call section when user selects call verification",function(){return enterCellPhoneExistingUser(),selectVerificationType("call"),runs(function(){return expect($("#sectionCall").is(":visible")).toBe(!0),expect($("#sectionSms").is(":visible")).toBe(!1),expect($("#sectionPush").is(":visible")).toBe(!1)})}),it("should display the push section when user selects push verification",function(){return enterCellPhoneExistingUser(),selectVerificationType("push"),runs(function(){return expect($("#sectionPush").is(":visible")).toBe(!0),expect($("#sectionCall").is(":visible")).toBe(!1),expect($("#sectionSms").is(":visible")).toBe(!1)})})})})}),require(["ui/account_view","models/messaging/chrome_extension"],function(AccountView,ChromeExtension){return describe("AccountView",function(){var load,view;return view=null,beforeEach(function(){return view=new AccountView,view.where="body",view.getTemplateLocation=function(){return"base/public/ui/mustaches/settings"},spyOn(ChromeExtension,"get").andCallFake(function(){return{isInstalled:function(cb){return cb(!1)}}}),load(view)}),it("should display the phone and email fields (readonly)",function(){return runs(function(){var countryCode,email,phone;return phone="123-234-345",email="lunch@hipster.com",countryCode="1",view.render({phone:phone,email:email,countryCode:countryCode}),expect($("#txtPhoneNumber").val()).toEqual(phone),expect($("#txtEmail").val()).toEqual(email),expect($("#country-code-0").val()).toEqual(countryCode),expect($("#txtPhoneNumber").is("[readonly]")).toBe(!0),expect($("#txtEmail").is("[readonly]")).toBe(!0),expect($("#authy-countries").is("[readonly]")).toEqual(!0)})}),it('should enable the phone field when "edit" is called',function(){return runs(function(){var countryCode,email,phone;return phone="123-234-345",email="lunch@hipster.com",countryCode="1",view.render({phone:phone,email:email,countryCode:countryCode}),$("#btnEditPhoneNumber").trigger("click"),expect($("#txtPhoneNumber").is("[readonly]")).toBe(!1),expect($("#btnEditPhoneNumber").text()).toBe("Save")})}),it('should enable the email field when "edit" is called',function(){return runs(function(){var countryCode,email,phone;return phone="123-234-345",email="lunch@hipster.com",countryCode="1",view.render({phone:phone,email:email,countryCode:countryCode}),$("#btnEditEmail").trigger("click"),expect($("#txtEmail").is("[readonly]")).toBe(!1),expect($("#btnEditEmail").text()).toBe("Save")})}),describe("onEditPhoneNumber",function(){return it('should call onEditPhoneNumber when "save" is clicked',function(){return runs(function(){var countryCode,phoneNumber;return view.render({phone:"phone",email:"email",countryCode:"countryCode"}),countryCode=null,phoneNumber=null,view.onEditPhoneNumber=function(mCountryCode,mPhoneNumber){return countryCode=mCountryCode,phoneNumber=mPhoneNumber},$("#btnEditPhoneNumber").trigger("click"),$("#country-code-0").val("123"),$("#txtPhoneNumber").val("123-234-345"),$("#btnEditPhoneNumber").trigger("click"),expect(countryCode).toEqual("123"),expect(phoneNumber).toEqual("123-234-345")})})}),describe("onEditEmail",function(){return it('should call onEditEmail when "save" is clicked',function(){return runs(function(){var email;return view.render({email:"random@email.com"}),email=null,view.onEditEmail=function(mEmail){return email=mEmail},$("#btnEditEmail").trigger("click"),$("#txtEmail").val("brunch@hipsters.com"),$("#btnEditEmail").trigger("click"),expect(email).toEqual("brunch@hipsters.com")})})}),describe("cancelEdit",function(){return beforeEach(function(){return runs(function(){return view.render({email:"email",phone:"phone",countryCode:"countryCode"}),$("#country-code-0").val("countryCode"),$("#btnEditPhoneNumber").trigger("click"),$("#btnEditEmail").trigger("click"),$("#txtPhoneNumber").val("cheese"),$("#txtEmail").val("cheese"),$("#country-code-0").val("cheese"),view.cancelEdit()})}),it("should disable the email field",function(){return runs(function(){return expect($("#txtEmail").is("[readonly]")).toBe(!0)})}),it("should disable the phone field",function(){return runs(function(){return expect($("#txtPhoneNumber").is("[readonly]")).toBe(!0)})}),it("should disable the country code field",function(){return runs(function(){return expect($("#countries-input-0").is("[readonly]")).toBe(!0)})}),it("should revert to original email",function(){return runs(function(){return expect(view.email).toEqual("email"),expect(view.getEmail()).toEqual("email")})}),it("should revert to original phone",function(){return runs(function(){return expect(view.phone).toEqual("phone"),expect(view.getPhoneNumber()).toEqual("phone")})}),it("should revert to original countryCode",function(){return runs(function(){return expect(view.countryCode).toEqual("countryCode"),expect(view.getCountryCode()).toEqual("countryCode")})})}),load=function(view){return runs(function(){return view.loadTemplate(function(){})}),waitsFor(function(){return view.isTemplateLoaded()},"the view template to load: "+view.template,300)}})}),require(["ui/create_authenticator_account_view"],function(){return describe("CreateAuthenticatorAccountView",function(){})}),require(["ui/device_request_view","ui/widgets/dialog","test/mock/mock_dialog"],function(DeviceRequestView,Dialog,MockDialog){return describe("DeviceRequestView",function(){var load,view;return view=null,beforeEach(function(){return MockDialog.mock(),view=new DeviceRequestView,view.where="body",view.getTemplateLocation=function(){return"base/public/ui/mustaches/settings"},load(view)}),afterEach(function(){return MockDialog.unmock()}),it("should display the device name, ipAddress and OS",function(){return runs(function(){var data;return data={name:"My Awesome Windows Device (not)",ip:"1.2.3.4"},view.render(data),expect($(".deviceName").text()).toContain(data.name),expect($(".deviceInfo").text()).toContain(data.ip),expect($(".deviceInfo").text()).toContain(data.name)})}),it('should call onAcceptBtnClicked when the "accept" button is clicked',function(){return runs(function(){var called;return called=!1,view.onAcceptBtnClicked=function(){return called=!0},view.render(),$("#btnAccept").trigger("click"),expect(called).toEqual(!0)})}),it('should call onRejectDevice when the "deny" button is clicked',function(){return runs(function(){var called;return called=!1,view.onRejectDevice=function(){return called=!0},view.render(),$("#btnReject").trigger("click"),expect(called).toEqual(!0)})}),describe("onAcceptBtnClicked",function(){return it("should not call onAcceptDevice when the user does not enter OK in the input dialog",function(){return Dialog.input=function(tone,message,title,placeholder,onPositive,onNegative){return null==onNegative&&(onNegative=function(){}),onPositive("NOT OK")},spyOn(view,"onAcceptDevice"),view.onAcceptBtnClicked(),expect(view.onAcceptDevice.callCount).toEqual(0)}),it("should not call onAcceptDevice when the user does not enter OK in the input dialog",function(){return Dialog.input=function(tone,message,title,placeholder,onPositive,onNegative){return null==onNegative&&(onNegative=function(){}),onPositive("OK")},spyOn(view,"onAcceptDevice"),view.onAcceptBtnClicked(),expect(view.onAcceptDevice.callCount).toEqual(1),Dialog.input=function(tone,message,title,placeholder,onPositive,onNegative){return null==onNegative&&(onNegative=function(){}),onPositive("ok")},view.onAcceptBtnClicked(),expect(view.onAcceptDevice.callCount).toEqual(2)})}),load=function(view){return runs(function(){return view.loadTemplate(function(){})}),waitsFor(function(){return view.isTemplateLoaded()},"the template to load: "+view.template,200)}})}),require(["ui/devices_view"],function(DevicesView){return describe("DevicesView",function(){var getFakeApp,load,view;return view=null,beforeEach(function(){return view=new DevicesView,view.where="body",view.getTemplateLocation=function(){return"base/public/ui/mustaches/settings"},load(view)}),it('should show "no devices" when the user has no devices',function(){return runs(function(){return view.render({}),expect($(".noDevices").length).toEqual(1),expect($(".device-row").length).toEqual(0)})}),it("should check the multi-device checkbox if the user has multiDeviceEnabled",function(){return runs(function(){return view.render({multiDeviceEnabled:!0}),expect(view.getMultiDeviceCheckboxValue()).toEqual(!0)})}),it("should not check the multi-device checkbox if the user has multiDeviceEnabled=false",function(){return runs(function(){return view.render({multiDeviceEnabled:!1}),expect(view.getMultiDeviceCheckboxValue()).toEqual(!1)})}),it("should display a list of devices",function(){return runs(function(){var devices;return devices=[getFakeApp(1,"name1","icon1"),getFakeApp(2,"name2","icon2"),getFakeApp(3,"name3","icon3"),getFakeApp(4,"name4","icon4"),getFakeApp(5,"name5","icon5")],view.render({devices:devices}),expect($(".device-row").length).toEqual(5)})}),it("should call onMultiDeviceStateChanged",function(){return runs(function(){var deviceId;return deviceId=null,view.onRemoveButtonClicked=function(id){return deviceId=id},view.render({devices:[getFakeApp(132,"name1","icon1")]}),$("[data-device-id]").trigger("click"),expect(deviceId).toEqual(132)})}),it("should call onMultiDeviceStateChange when the checkbox is changed",function(){return runs(function(){var isChecked;return isChecked=!1,view.onMultiDeviceStateChange=function(enable){return isChecked=enable},view.render({multiDeviceEnabled:!1}),expect(view.getMultiDeviceCheckboxValue()).toEqual(!1),$("#checkboxMultiDeviceState").trigger("click"),expect(isChecked).toEqual(!0)})}),it("should check the checkbox when calling setMultiDeviceCheckbox with true",function(){return runs(function(){return view.render({multiDeviceEnabled:!1}),view.setMultiDeviceCheckbox(!0),expect(view.getMultiDeviceCheckboxValue()).toEqual(!0)})}),it("should uncheck the checkbox when calling setMultiDeviceCheckbox with false",function(){return runs(function(){return view.render({multiDeviceEnabled:!0}),view.setMultiDeviceCheckbox(!1),expect(view.getMultiDeviceCheckboxValue()).toEqual(!1)})}),load=function(view){return runs(function(){return view.loadTemplate(function(){})
}),waitsFor(function(){return view.isTemplateLoaded()},"the template to load: "+view.template,200)},getFakeApp=function(id,name,icon){return{id:id,name:name,icon:icon}}})}),require(["ui/external_accounts_view"],function(ExternalAccountsView){return describe("ExternalAccountsView",function(){var getFakeApp,loadViewSync,view;return view=null,beforeEach(function(){return view=new ExternalAccountsView,view.getTemplateLocation=function(){return"base/public/ui/mustaches/settings"}}),it("should throw an exception if onAppClicked is not implemented",function(){var fail;fail=!1;try{view.onAppClicked()}catch(_error){fail=!0}return expect(fail).toBe(!0)}),it("should not be rendered to the 'body'",function(){return expect(view.where).not.toEqual("body")}),it("should display a list of apps when render is called",function(){return loadViewSync(view),runs(function(){var apps;return apps=[getFakeApp("menu-image1","1","app1","foo"),getFakeApp("menu-image1","1","app1","foo"),getFakeApp("menu-image1","1","app1","foo")],view.where="body",view.render({apps:apps}),expect(view.isTemplateLoaded()).toBe(!0),expect($(".externalAccount").length).toBe(3)})}),it("should display 'No Apps' if 0 apps are passed to render",function(){return loadViewSync(view),runs(function(){var apps;return apps=[],view.where="body",view.render({apps:apps}),expect(view.isTemplateLoaded()).toBe(!0),expect($(".externalAccount").length).toBe(0),expect($(".noApps").length).toBe(1)})}),it("should call onAppClicked with the correct id when an app is clicked",function(){return loadViewSync(view),runs(function(){var apps,called,id;return apps=[getFakeApp("menu-image2","2","app2","foo2")],view.where="body",view.render({apps:apps}),called=!1,id=null,view.onAppClicked=function(appId){return called=!0,id=appId},$(".accountName").trigger("click"),expect(called).toBe(!0),expect(id).toBe("2")})}),describe("updateImages",function(){return it("should update the images for every app that is passed as parameter",function(){return loadViewSync(view),runs(function(){var apps,images;return apps=[getFakeApp("imageInit","1","app1","initial"),getFakeApp("imageInit","2","app2","initial"),getFakeApp("imageInit","3","app3","initial")],view.where="body",view.render({apps:apps}),images=$("img.backupState"),_.each(images,function(item){return expect($(item).attr("src")).toEqual("initial")}),expect(images.length).toBe(3),apps=[getFakeApp("imageInit","1","app1","final"),getFakeApp("imageInit","2","app2","final"),getFakeApp("imageInit","3","app3","final"),getFakeApp("imageInit","4","app4","final")],view.updateImages(apps),images=$("img.backupState"),_.each(images,function(item){return expect($(item).attr("src")).toEqual("final")}),expect(images.length).toBe(3)})})}),describe("backups password",function(){return it("should set the backups password as editable if clicked on change and the user has a backups password",function(){return loadViewSync(view),runs(function(){return view.where="body",view.render({apps:[],backupsPassword:!0}),$("#btnChangeBackupsPassword").trigger("click"),expect($("#txtBackupsPassword").is("[readonly]")).toBe(!1),expect($("#btnChangeBackupsPassword").text()).toEqual("Set")})}),it("should call onSaveBackupsPassword when the user attempts to save the new password and it has been confirmed",function(){return loadViewSync(view),runs(function(){var backupsPassword;return backupsPassword=null,view.onSaveBackupsPassword=function(password){return backupsPassword=password},view.where="body",view.render({apps:[],backupsPassword:!0}),$("#btnChangeBackupsPassword").trigger("click"),$("#txtBackupsPassword").val("qwerty"),$("#btnChangeBackupsPassword").trigger("click"),$("#txtBackupsPassword").val("qwerty"),$("#btnChangeBackupsPassword").trigger("click"),expect(backupsPassword).toEqual("qwerty"),expect($("#btnChangeBackupsPassword").text()).toEqual("Change")})}),xit("should have the backups password as not editable by default",function(){return loadViewSync(view),runs(function(){return view.where="body",view.render({apps:[]}),expect($("#txtBackupsPassword").is("[readonly]")).toBe(!0)})}),it("should show ****** if a backupsPassword is present ",function(){return loadViewSync(view),runs(function(){return view.where="body",view.render({apps:[],backupsPassword:!0}),expect($("#txtBackupsPassword").val()).toBe("**********")})}),xit("should show a placeholder if backupsPassword is not present ",function(){return loadViewSync(view),runs(function(){return view.where="body",view.render({apps:[],backupsPassword:!1}),expect($("#txtBackupsPassword").val()).toBe("")})})}),getFakeApp=function(menuImage,id,name,backingUpImage){var app;return app={getMenuImage:function(){return menuImage},getId:function(){return id},getName:function(){return name},getBackingUpImage:function(){return backingUpImage}}},loadViewSync=function(view){return runs(function(){return view.loadTemplate(function(){})}),waitsFor(function(){return view.isTemplateLoaded()},"the template to load: "+view.template,200)}})}),require(["ui/update_auth_app_view"],function(UpdateAuthAppView){return describe("UpdateAuthAppView",function(){var load,view;return view=null,beforeEach(function(){return view=new UpdateAuthAppView,view.getTemplateLocation=function(){return"base/public/ui/mustaches/settings"},view.where="body",load(view)}),it("should display the 'subtitle' correctly",function(){return runs(function(){var subtitle,text;return subtitle="foo bar with hipsters",view.render({subtitle:subtitle}),text=$(".subtitle").text().trim(),expect(text).toEqual(subtitle)})}),it("should display the 'title' correctly",function(){return runs(function(){var text,title;return title="hipsters eating lunch",view.render({title:title,newAccount:!0}),text=$(".title").text().trim(),expect(text).toEqual(title)})}),it("should display the 'currentLogoName' correctly",function(){return runs(function(){var text,title;return title="hipsters eating lunch",view.render({currentLogoName:title,newAccount:!1}),text=$(".logoTitle div").text().trim(),expect(text).toEqual(title)})}),it("should display 'account name' correctly",function(){return runs(function(){var currentName,value;return currentName="hipster app name",view.render({currentName:currentName}),value=$("#txtAppName").attr("value"),expect(value).toEqual(currentName)})}),it("should display a list of accounts",function(){return runs(function(){var accounts;return accounts=[{getMenuImage:"image1.png",accountName1:"accountName1"},{getMenuImage:"image2.png",accountName2:"accountName2"}],view.render({accounts:accounts}),expect($(".account").length).toBe(2)})}),it("should display a message if no accounts are available",function(){return runs(function(){return view.render({accounts:[]}),expect($(".account").length).toBe(0),expect($(".noAccounts").length).toEqual(1)})}),it("should throw an exception when onAccountClicked is not implemented",function(){return runs(function(){var e,error;error=!1;try{view.onAccountClicked()}catch(_error){e=_error,error=!0}return expect(error).toEqual(!0)})}),it("should highlight an account when selected",function(){return runs(function(){var accountName,accounts,fakeName;return fakeName="extermely secure hipster account",accounts=[{getMenuImage:"image1.png",type:fakeName}],accountName=null,view.onAccountClicked=function(account){return accountName=account},view.render({accounts:accounts,titleize:!0}),$(".account").trigger("click"),expect(accountName).not.toBeNull(),expect(accountName).toEqual(fakeName),expect(view.selectedAccountName).toEqual(accountName)})}),it("should call onDoneClicked with the account name and the app name",function(){return runs(function(){var accountName,appName,originalAppName;return originalAppName="hippy app",view.render({currentName:originalAppName,titleize:!0,accounts:[{type:"foobar"}]}),accountName=null,appName=null,view.onAccountClicked=function(){},view.onDoneClicked=function(account,app){return accountName=account,appName=app},$(".account").trigger("click"),$("#btnDone").trigger("click"),expect(appName).toEqual(originalAppName),expect(accountName).toEqual("foobar")})}),it("should return the app's name with getAppName()",function(){return runs(function(){var currentName;return currentName="hipster app name",view.render({currentName:currentName}),expect(view.getAppName()).toEqual(currentName)})}),describe("setSelectedAccount",function(){return runs(function(){return view.render({accounts:[{type:"foo"},{type:"bar"},{type:"baz"}],currentAccount:"bar",titleize:!0})}),it("should mark a logo by default",function(){return runs(function(){return expect($("[data-account-type=foo]").hasClass("selectedAccount")).toBe(!1),expect($("[data-account-type=bar]").hasClass("selectedAccount")).toBe(!0),expect($("[data-account-type=baz]").hasClass("selectedAccount")).toBe(!1)})}),it("should mark an account as selected when calling setSelectedAccount",function(){return runs(function(){return view.setSelectedAccount("foo"),expect($("[data-account-type=foo]").hasClass("selectedAccount")).toBe(!0),view.setSelectedAccount("bar"),expect($("[data-account-type=bar]").hasClass("selectedAccount")).toBe(!0),view.setSelectedAccount("baz"),expect($("[data-account-type=baz]").hasClass("selectedAccount")).toBe(!0)})}),it("should mark as unselected every other account when calling setSelectedAccount",function(){return runs(function(){return view.setSelectedAccount("baz"),expect($("[data-account-type=foo]").hasClass("selectedAccount")).toBe(!1),expect($("[data-account-type=bar]").hasClass("selectedAccount")).toBe(!1),expect($("[data-account-type=baz]").hasClass("selectedAccount")).toBe(!0)})})}),load=function(view){return runs(function(){return view.loadTemplate(function(){})}),waitsFor(function(){return view.isTemplateLoaded()},"the template to load: "+view.template,200)}})});var __hasProp={}.hasOwnProperty,__extends=function(child,parent){function ctor(){this.constructor=child}for(var key in parent)__hasProp.call(parent,key)&&(child[key]=parent[key]);return ctor.prototype=parent.prototype,child.prototype=new ctor,child.__super__=parent.prototype,child};require(["ui/a_view"],function(View){var TestView;return TestView=function(_super){function TestView(){this.where="body",this.template="<p> my name is {{name}} </p>"}return __extends(TestView,_super),TestView.prototype.update=function(){},TestView}(View),describe("View",function(){var view;return view=null,describe("Caching",function(){return beforeEach(function(){return view=new TestView,view.render({name:"bob"}),spyOn(view,"renderMustache")}),describe("Enabled",function(){return beforeEach(function(){return view.cachingEnabled=!0}),describe("Invalidated",function(){return beforeEach(function(){return view.invalidateCache()}),it("should redraw when the same object is passed",function(){return view.render({name:"bob"}),expect(view.renderMustache).toHaveBeenCalled()})}),describe("Valid",function(){return beforeEach(function(){return view.cacheValid=!0}),it("should not redraw when the same object is passed",function(){var data;return data={name:"bob"},view.render(data),expect(view.shouldIgnoreCache(data)).toBe(!1),expect(view.renderMustache).not.toHaveBeenCalled()})}),it("should redraw when new object is passed",function(){return view.render({name:"alice"}),expect(view.renderMustache).toHaveBeenCalled()})}),describe("Disabled",function(){return beforeEach(function(){return view.cachingEnabled=!1}),it("should draw even when the same object is passed",function(){return view.render({name:"bob"}),expect(view.renderMustache).toHaveBeenCalled(),view.render({name:"bob"}),expect(view.renderMustache).toHaveBeenCalled()})})})})});